import { Language } from '@/types'

// 标签翻译映射
export const tagTranslations: Record<string, { zh: string; ja: string }> = {
  // 通用标签
  '自我介绍': { zh: '自我介绍', ja: '自己紹介' },
  '基础问题': { zh: '基础问题', ja: '基本的な質問' },
  '职业选择': { zh: '职业选择', ja: '職業選択' },
  '动机': { zh: '动机', ja: '動機' },
  '优缺点': { zh: '优缺点', ja: '長所・短所' },
  '自我认知': { zh: '自我认知', ja: '自己認識' },
  '职业规划': { zh: '职业规划', ja: 'キャリアプラン' },
  '未来发展': { zh: '未来发展', ja: '将来の発展' },
  '离职原因': { zh: '离职原因', ja: '退職理由' },
  '职业发展': { zh: '职业发展', ja: 'キャリア発展' },
  '压力管理': { zh: '压力管理', ja: 'ストレス管理' },
  '工作方法': { zh: '工作方法', ja: '仕事の方法' },
  '成就': { zh: '成就', ja: '成果' },
  '项目经验': { zh: '项目经验', ja: 'プロジェクト経験' },
  '薪资谈判': { zh: '薪资谈判', ja: '給与交渉' },
  '期望': { zh: '期望', ja: '期待' },
  '团队合作': { zh: '团队合作', ja: 'チームワーク' },
  '沟通能力': { zh: '沟通能力', ja: 'コミュニケーション能力' },
  '反问': { zh: '反问', ja: '逆質問' },
  '职位了解': { zh: '职位了解', ja: 'ポジション理解' },
  '兴趣爱好': { zh: '兴趣爱好', ja: '趣味' },
  '生活方式': { zh: '生活方式', ja: 'ライフスタイル' },
  '学习方法': { zh: '学习方法', ja: '学習方法' },
  '自我提升': { zh: '自我提升', ja: '自己向上' },
  '公司了解': { zh: '公司了解', ja: '会社理解' },
  '求职准备': { zh: '求职准备', ja: '求職準備' },
  '职位匹配': { zh: '职位匹配', ja: 'ポジションマッチング' },
  '自我评估': { zh: '自我评估', ja: '自己評価' },
  '弱点改进': { zh: '弱点改进', ja: '弱点改善' },
  '自我反思': { zh: '自我反思', ja: '自己反省' },
  '挑战应对': { zh: '挑战应对', ja: 'チャレンジ対応' },
  '问题解决': { zh: '问题解决', ja: '問題解決' },
  '反馈处理': { zh: '反馈处理', ja: 'フィードバック処理' },
  '成长心态': { zh: '成长心态', ja: '成長マインドセット' },
  '沟通风格': { zh: '沟通风格', ja: 'コミュニケーションスタイル' },
  '表达能力': { zh: '表达能力', ja: '表現力' },
  '工作生活平衡': { zh: '工作生活平衡', ja: 'ワークライフバランス' },
  '时间管理': { zh: '时间管理', ja: '時間管理' },
  '长期规划': { zh: '长期规划', ja: '長期計画' },
  '学习目标': { zh: '学习目标', ja: '学習目標' },
  '技能提升': { zh: '技能提升', ja: 'スキル向上' },
  '工作态度': { zh: '工作态度', ja: '仕事の姿勢' },
  '加班观念': { zh: '加班观念', ja: '残業の考え方' },
  '技术趋势': { zh: '技术趋势', ja: '技術トレンド' },
  '行业观察': { zh: '行业观察', ja: '業界観察' },
  '团队环境': { zh: '团队环境', ja: 'チーム環境' },
  '工作文化': { zh: '工作文化', ja: '仕事文化' },

  // 技术标签
  'Java': { zh: 'Java', ja: 'Java' },
  'Spring': { zh: 'Spring', ja: 'Spring' },
  'JVM': { zh: 'JVM', ja: 'JVM' },
  'React': { zh: 'React', ja: 'React' },
  'JavaScript': { zh: 'JavaScript', ja: 'JavaScript' },
  'CSS': { zh: 'CSS', ja: 'CSS' },
  'HTML': { zh: 'HTML', ja: 'HTML' },
  'REST': { zh: 'REST', ja: 'REST' },
  'API設計': { zh: 'API设计', ja: 'API設計' },
  'HTTP': { zh: 'HTTP', ja: 'HTTP' },
  '数据库': { zh: '数据库', ja: 'データベース' },
  '索引': { zh: '索引', ja: 'インデックス' },
  '性能优化': { zh: '性能优化', ja: 'パフォーマンス最適化' },
  '缓存': { zh: '缓存', ja: 'キャッシュ' },
  'Redis': { zh: 'Redis', ja: 'Redis' },
  '微服务': { zh: '微服务', ja: 'マイクロサービス' },
  '架构': { zh: '架构', ja: 'アーキテクチャ' },
  '分布式系统': { zh: '分布式系统', ja: '分散システム' },
  '安全': { zh: '安全', ja: 'セキュリティ' },
  'SQL注入': { zh: 'SQL注入', ja: 'SQLインジェクション' },
  '数据库安全': { zh: '数据库安全', ja: 'データベースセキュリティ' },
  '消息队列': { zh: '消息队列', ja: 'メッセージキュー' },
  '异步处理': { zh: '异步处理', ja: '非同期処理' },
  '系统架构': { zh: '系统架构', ja: 'システムアーキテクチャ' },
  '负载均衡': { zh: '负载均衡', ja: 'ロードバランシング' },
  '高可用': { zh: '高可用', ja: '高可用性' },
  '事务': { zh: '事务', ja: 'トランザクション' },
  'ACID': { zh: 'ACID', ja: 'ACID' },
  'Docker': { zh: 'Docker', ja: 'Docker' },
  '容器化': { zh: '容器化', ja: 'コンテナ化' },
  'DevOps': { zh: 'DevOps', ja: 'DevOps' },
  'AWS': { zh: 'AWS', ja: 'AWS' },
  '云计算': { zh: '云计算', ja: 'クラウド' },

  // 日本企业特色标签
  '日本企业文化': { zh: '日本企业文化', ja: '日本企業文化' },
  '日语能力': { zh: '日语能力', ja: '日本語能力' },
  '语言交流': { zh: '语言交流', ja: '言語交流' },
  '工作动机': { zh: '工作动机', ja: '仕事の動機' },
  '海外就职': { zh: '海外就职', ja: '海外就職' },
  '改善文化': { zh: '改善文化', ja: '改善文化' },
  '持续改进': { zh: '持续改进', ja: '継続改善' },
  '加班文化': { zh: '加班文化', ja: '残業文化' },
  '工作时间': { zh: '工作时间', ja: '勤務時間' },
  '终身雇用': { zh: '终身雇用', ja: '終身雇用' },
  '就业制度': { zh: '就业制度', ja: '雇用制度' },
  '集体决策': { zh: '集体决策', ja: '集団意思決定' },
  '决策过程': { zh: '决策过程', ja: '意思決定プロセス' },
  '前辈后辈': { zh: '前辈后辈', ja: '先輩後輩' },
  '人际关系': { zh: '人际关系', ja: '人間関係' },
  '细节管理': { zh: '细节管理', ja: '細部管理' },
  '质量意识': { zh: '质量意识', ja: '品質意識' },
  '职业发展规划': { zh: '职业发展', ja: 'キャリア発展' }
}

// 获取标签的翻译
export function getTagTranslation(tag: string, language: Language): string {
  const translation = tagTranslations[tag]
  if (translation) {
    return translation[language]
  }
  // 如果没有找到翻译，返回原标签
  return tag
}

// 批量翻译标签
export function translateTags(tags: string[], language: Language): string[] {
  return tags.map(tag => getTagTranslation(tag, language))
} 