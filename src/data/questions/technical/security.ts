import { Question } from '@/types'

export const securityQuestions: Question[] = [
  {
    id: 'security-1',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是SQL注入？如何防止SQL注入攻击？',
      ja: 'SQLインジェクションとは何ですか？SQLインジェクション攻撃をどのように防ぎますか？'
    },
    answer: {
      zh: 'SQL注入是攻击者通过在输入中插入恶意SQL代码来操控数据库的攻击方式。防止方法：1）使用参数化查询（预编译语句），不要直接拼接SQL；2）输入验证，检查用户输入的格式和长度；3）转义特殊字符，对单引号等特殊字符进行转义；4）最小权限原则，数据库用户只给必要的权限；5）使用ORM框架，减少直接写SQL的机会；6）定期更新数据库软件；7）错误信息不要暴露数据库结构。关键是永远不要信任用户输入，所有输入都要进行验证和过滤。',
      ja: 'SQLインジェクションは、攻撃者が入力に悪意のあるSQLコードを挿入してデータベースを操作する攻撃方法です。防止方法：1）パラメータ化クエリ（プリペアドステートメント）を使用し、SQLを直接結合しない；2）入力検証、ユーザー入力のフォーマットと長さをチェック；3）特殊文字のエスケープ、シングルクォートなどの特殊文字をエスケープ；4）最小権限の原則、データベースユーザーに必要な権限のみ付与；5）ORMフレームワークの使用、直接SQLを書く機会を減らす；6）データベースソフトウェアの定期更新；7）エラーメッセージでデータベース構造を露出しない。重要なのは、ユーザー入力を決して信頼せず、すべての入力を検証・フィルタリングすることです。'
    },
    tags: ['SQL注入', '数据库安全', '参数化查询'],
    difficulty: 'medium'
  },
  {
    id: 'security-2',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是XSS攻击？如何防止XSS攻击？',
      ja: 'XSS攻撃とは何ですか？XSS攻撃をどのように防ぎますか？'
    },
    answer: {
      zh: 'XSS（跨站脚本攻击）是攻击者在网页中注入恶意脚本，当其他用户访问时执行这些脚本。类型：存储型XSS（脚本存储在服务器）、反射型XSS（脚本在URL中）、DOM型XSS（通过DOM操作执行）。防止方法：1）输出编码，对用户输入进行HTML编码；2）输入验证，过滤危险字符和标签；3）CSP（内容安全策略），限制脚本来源；4）HttpOnly Cookie，防止JavaScript访问Cookie；5）使用安全的模板引擎；6）定期安全扫描。关键是对所有用户输入进行适当的编码和过滤。',
      ja: 'XSS（クロスサイトスクリプティング）は、攻撃者がウェブページに悪意のあるスクリプトを注入し、他のユーザーがアクセスした際にこれらのスクリプトを実行する攻撃です。タイプ：ストアドXSS（スクリプトがサーバーに保存）、リフレクテッドXSS（スクリプトがURLに含まれる）、DOM型XSS（DOM操作を通じて実行）。防止方法：1）出力エンコーディング、ユーザー入力をHTMLエンコーディング；2）入力検証、危険な文字とタグをフィルタリング；3）CSP（コンテンツセキュリティポリシー）、スクリプトのソースを制限；4）HttpOnly Cookie、JavaScriptによるCookieアクセスを防止；5）安全なテンプレートエンジンの使用；6）定期的なセキュリティスキャン。重要なのは、すべてのユーザー入力に適切なエンコーディングとフィルタリングを行うことです。'
    },
    tags: ['XSS', '跨站脚本', '前端安全'],
    difficulty: 'medium'
  },
  {
    id: 'security-3',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是CSRF攻击？如何防止CSRF攻击？',
      ja: 'CSRF攻撃とは何ですか？CSRF攻撃をどのように防ぎますか？'
    },
    answer: {
      zh: 'CSRF（跨站请求伪造）是攻击者利用用户的身份，在用户不知情的情况下发送恶意请求。攻击过程：用户登录网站A，攻击者诱导用户访问网站B，网站B向网站A发送请求，利用用户的身份执行操作。防止方法：1）CSRF Token，在表单中添加随机令牌；2）验证Referer头，检查请求来源；3）双重提交Cookie，在Cookie和请求参数中都放置令牌；4）SameSite Cookie属性，限制跨站请求携带Cookie；5）重要操作需要二次验证；6）使用POST而不是GET进行状态改变操作。',
      ja: 'CSRF（クロスサイトリクエストフォージェリ）は、攻撃者がユーザーの身元を利用し、ユーザーが知らないうちに悪意のあるリクエストを送信する攻撃です。攻撃プロセス：ユーザーがサイトAにログイン、攻撃者がユーザーをサイトBに誘導、サイトBがサイトAにリクエストを送信し、ユーザーの身元を利用して操作を実行。防止方法：1）CSRFトークン、フォームにランダムトークンを追加；2）Refererヘッダーの検証、リクエストの送信元をチェック；3）ダブルサブミットCookie、Cookieとリクエストパラメータの両方にトークンを配置；4）SameSite Cookie属性、クロスサイトリクエストでのCookie送信を制限；5）重要な操作には二次認証が必要；6）状態変更操作にはGETではなくPOSTを使用。'
    },
    tags: ['CSRF', '跨站请求伪造', 'CSRF Token'],
    difficulty: 'medium'
  },
  {
    id: 'security-4',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是加密和哈希？它们有什么区别？',
      ja: '暗号化とハッシュとは何ですか？違いは何ですか？'
    },
    answer: {
      zh: '加密是将明文转换为密文的过程，可以通过密钥解密恢复原文；哈希是将任意长度的数据转换为固定长度的摘要，不可逆转。区别：加密是双向的，哈希是单向的；加密用于保护数据传输，哈希用于验证数据完整性。加密分为对称加密（AES、DES）和非对称加密（RSA、ECC）；常见哈希算法有MD5、SHA-1、SHA-256等。应用场景：加密用于HTTPS、数据库加密；哈希用于密码存储、数字签名、区块链。选择时要考虑安全性、性能和应用场景。',
      ja: '暗号化は平文を暗号文に変換するプロセスで、鍵を使って復号化して元の文を復元できます；ハッシュは任意の長さのデータを固定長のダイジェストに変換し、不可逆です。違い：暗号化は双方向、ハッシュは単方向；暗号化はデータ伝送の保護に使用、ハッシュはデータの完全性検証に使用。暗号化は対称暗号化（AES、DES）と非対称暗号化（RSA、ECC）に分かれます；一般的なハッシュアルゴリズムにはMD5、SHA-1、SHA-256などがあります。応用場面：暗号化はHTTPS、データベース暗号化に使用；ハッシュはパスワード保存、デジタル署名、ブロックチェーンに使用。選択時はセキュリティ、パフォーマンス、応用場面を考慮する必要があります。'
    },
    tags: ['加密', '哈希', '对称加密', '非对称加密'],
    difficulty: 'medium'
  },
  {
    id: 'security-5',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是HTTPS？它是如何工作的？',
      ja: 'HTTPSとは何ですか？どのように動作しますか？'
    },
    answer: {
      zh: 'HTTPS是HTTP的安全版本，使用SSL/TLS加密传输数据。工作流程：1）客户端向服务器发送请求；2）服务器返回SSL证书；3）客户端验证证书的有效性；4）客户端生成对称密钥，用服务器公钥加密发送；5）服务器用私钥解密得到对称密钥；6）后续通信使用对称密钥加密。HTTPS的好处：数据加密，防止窃听；身份验证，确认服务器身份；数据完整性，防止篡改。缺点是性能开销稍大，但现在硬件性能提升，影响很小。',
      ja: 'HTTPSはHTTPの安全版で、SSL/TLSを使用してデータ伝送を暗号化します。動作フロー：1）クライアントがサーバーにリクエストを送信；2）サーバーがSSL証明書を返信；3）クライアントが証明書の有効性を検証；4）クライアントが対称鍵を生成し、サーバーの公開鍵で暗号化して送信；5）サーバーが秘密鍵で復号化して対称鍵を取得；6）以降の通信は対称鍵で暗号化。HTTPSの利点：データ暗号化、盗聴を防止；身元認証、サーバーの身元を確認；データ完全性、改ざんを防止。欠点は性能オーバーヘッドがやや大きいことですが、現在はハードウェア性能の向上により、影響は非常に小さいです。'
    },
    tags: ['HTTPS', 'SSL/TLS', '数据加密'],
    difficulty: 'medium'
  },
  {
    id: 'security-6',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是身份认证和授权？常见的认证方式有哪些？',
      ja: '認証と認可とは何ですか？一般的な認証方式は何ですか？'
    },
    answer: {
      zh: '身份认证是验证用户身份的过程，授权是确定用户能访问哪些资源的过程。常见认证方式：1）用户名密码，最基本的认证方式；2）多因素认证（MFA），结合多种认证因子；3）生物识别，指纹、面部识别等；4）数字证书，使用PKI体系；5）单点登录（SSO），一次登录访问多个系统；6）OAuth，第三方授权协议；7）JWT令牌，无状态的令牌认证。授权模型：RBAC（基于角色）、ABAC（基于属性）。选择时要考虑安全性、用户体验和实现复杂度。',
      ja: '認証はユーザーの身元を検証するプロセスで、認可はユーザーがどのリソースにアクセスできるかを決定するプロセスです。一般的な認証方式：1）ユーザー名パスワード、最も基本的な認証方式；2）多要素認証（MFA）、複数の認証要素を組み合わせ；3）生体認証、指紋、顔認識など；4）デジタル証明書、PKI体系を使用；5）シングルサインオン（SSO）、一度のログインで複数のシステムにアクセス；6）OAuth、第三者認可プロトコル；7）JWTトークン、ステートレスなトークン認証。認可モデル：RBAC（ロールベース）、ABAC（属性ベース）。選択時はセキュリティ、ユーザー体験、実装の複雑さを考慮する必要があります。'
    },
    tags: ['身份认证', '授权', 'JWT', 'OAuth'],
    difficulty: 'medium'
  },
  {
    id: 'security-7',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是DDoS攻击？如何防护DDoS攻击？',
      ja: 'DDoS攻撃とは何ですか？DDoS攻撃をどのように防護しますか？'
    },
    answer: {
      zh: 'DDoS（分布式拒绝服务）攻击是使用大量计算机同时向目标服务器发送请求，使其无法正常服务。类型：流量攻击（UDP洪水、ICMP洪水）、协议攻击（SYN洪水、Ping of Death）、应用层攻击（HTTP洪水、慢速攻击）。防护方法：1）流量清洗，过滤恶意流量；2）CDN分发，分散攻击压力；3）负载均衡，分散到多个服务器；4）限流控制，限制单IP请求频率；5）黑白名单，阻止恶意IP；6）云防护服务，使用专业的DDoS防护服务。关键是要有足够的带宽和处理能力。',
      ja: 'DDoS（分散サービス拒否）攻撃は、大量のコンピューターを使用して同時にターゲットサーバーにリクエストを送信し、正常なサービスを不可能にする攻撃です。タイプ：トラフィック攻撃（UDP洪水、ICMP洪水）、プロトコル攻撃（SYN洪水、Ping of Death）、アプリケーション層攻撃（HTTP洪水、スロー攻撃）。防護方法：1）トラフィッククリーニング、悪意のあるトラフィックをフィルタリング；2）CDN分散、攻撃圧力を分散；3）ロードバランシング、複数のサーバーに分散；4）レート制限、単一IPのリクエスト頻度を制限；5）ブラックリスト・ホワイトリスト、悪意のあるIPをブロック；6）クラウド防護サービス、専門的なDDoS防護サービスを使用。重要なのは、十分な帯域幅と処理能力を持つことです。'
    },
    tags: ['DDoS', '分布式攻击', '流量清洗'],
    difficulty: 'medium'
  },
  {
    id: 'security-8',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是安全漏洞扫描？如何进行安全测试？',
      ja: 'セキュリティ脆弱性スキャンとは何ですか？セキュリティテストをどのように行いますか？'
    },
    answer: {
      zh: '安全漏洞扫描是自动化检测系统中安全漏洞的过程。扫描类型：1）端口扫描，检测开放的端口和服务；2）漏洞扫描，检测已知的安全漏洞；3）Web应用扫描，检测Web应用的安全问题；4）代码扫描，检测源代码中的安全缺陷。安全测试方法：黑盒测试（外部视角）、白盒测试（内部视角）、灰盒测试（结合两者）。常用工具：Nmap、Nessus、OWASP ZAP、SonarQube等。测试流程：信息收集、漏洞识别、漏洞验证、报告生成、修复建议。',
      ja: 'セキュリティ脆弱性スキャンは、システム内のセキュリティ脆弱性を自動的に検出するプロセスです。スキャンタイプ：1）ポートスキャン、開放されたポートとサービスを検出；2）脆弱性スキャン、既知のセキュリティ脆弱性を検出；3）Webアプリケーションスキャン、Webアプリケーションのセキュリティ問題を検出；4）コードスキャン、ソースコード内のセキュリティ欠陥を検出。セキュリティテスト方法：ブラックボックステスト（外部視点）、ホワイトボックステスト（内部視点）、グレーボックステスト（両者の組み合わせ）。一般的なツール：Nmap、Nessus、OWASP ZAP、SonarQubeなど。テストフロー：情報収集、脆弱性識別、脆弱性検証、レポート生成、修正提案。'
    },
    tags: ['漏洞扫描', '安全测试', '渗透测试'],
    difficulty: 'medium'
  },
  {
    id: 'security-9',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是API安全？如何保护API接口？',
      ja: 'APIセキュリティとは何ですか？APIインターフェースをどのように保護しますか？'
    },
    answer: {
      zh: 'API安全是保护API接口免受攻击和滥用的措施。主要威胁：未授权访问、数据泄露、注入攻击、DDoS攻击。保护措施：1）身份认证，使用API Key、OAuth、JWT等；2）授权控制，基于角色或权限的访问控制；3）输入验证，验证请求参数的格式和内容；4）限流控制，防止API被滥用；5）HTTPS加密，保护数据传输；6）日志监控，记录API访问日志；7）版本管理，及时更新和修复漏洞；8）错误处理，不暴露敏感信息。API网关可以集中处理这些安全措施。',
      ja: 'APIセキュリティは、APIインターフェースを攻撃や悪用から保護する措置です。主な脅威：未承認アクセス、データ漏洩、インジェクション攻撃、DDoS攻撃。保護措置：1）認証、API Key、OAuth、JWTなどを使用；2）認可制御、ロールまたは権限ベースのアクセス制御；3）入力検証、リクエストパラメータのフォーマットと内容を検証；4）レート制限、APIの悪用を防止；5）HTTPS暗号化、データ伝送を保護；6）ログ監視、APIアクセスログを記録；7）バージョン管理、適時更新と脆弱性修正；8）エラー処理、機密情報を露出しない。APIゲートウェイでこれらのセキュリティ措置を集中処理できます。'
    },
    tags: ['API安全', 'API网关', '接口保护'],
    difficulty: 'medium'
  },
  {
    id: 'security-10',
    category: 'technical',
    subcategory: 'security',
    question: {
      zh: '什么是零信任安全模型？它有什么特点？',
      ja: 'ゼロトラストセキュリティモデルとは何ですか？どのような特徴がありますか？'
    },
    answer: {
      zh: '零信任安全模型是"永不信任，始终验证"的安全理念，不管是内网还是外网的访问都需要验证。传统安全模型认为内网是安全的，零信任模型认为网络本身不可信。核心原则：1）验证身份，对所有用户和设备进行身份验证；2）最小权限，只给必要的访问权限；3）持续监控，实时监控用户行为；4）动态访问控制，根据上下文动态调整权限；5）加密通信，所有通信都要加密；6）微分段，网络进行细粒度分割。实现技术：多因素认证、身份管理、网络分段、行为分析等。',
      ja: 'ゼロトラストセキュリティモデルは「決して信頼せず、常に検証する」というセキュリティ理念で、内部ネットワークか外部ネットワークかに関わらず、すべてのアクセスに検証が必要です。従来のセキュリティモデルは内部ネットワークが安全だと考えますが、ゼロトラストモデルはネットワーク自体が信頼できないと考えます。核心原則：1）身元検証、すべてのユーザーとデバイスに身元認証；2）最小権限、必要なアクセス権限のみ付与；3）継続監視、ユーザー行動をリアルタイムで監視；4）動的アクセス制御、コンテキストに応じて権限を動的に調整；5）暗号化通信、すべての通信を暗号化；6）マイクロセグメンテーション、ネットワークを細粒度で分割。実装技術：多要素認証、アイデンティティ管理、ネットワークセグメンテーション、行動分析など。'
    },
    tags: ['零信任', '网络安全', '访问控制'],
    difficulty: 'hard'
  }
] 