import { Question } from '@/types'

export const devopsQuestions: Question[] = [
  {
    id: 'devops-1',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是CI/CD？如何实现持续集成和持续部署？',
      ja: 'CI/CDとは何ですか？継続的インテグレーションと継続的デプロイメントをどのように実現しますか？'
    },
    answer: {
      zh: 'CI/CD是持续集成和持续部署的缩写。持续集成（CI）是开发人员频繁地将代码合并到主分支，每次合并都会自动触发构建和测试；持续部署（CD）是自动将通过测试的代码部署到生产环境。实现方式：使用Jenkins、GitLab CI、GitHub Actions等工具；设置代码提交触发器；自动化测试（单元测试、集成测试）；自动化构建和打包；自动化部署到不同环境。好处是减少人工错误、提高开发效率、快速发现问题、缩短发布周期。',
      ja: 'CI/CDは継続的インテグレーションと継続的デプロイメントの略です。継続的インテグレーション（CI）は、開発者が頻繁にコードをメインブランチにマージし、各マージが自動的にビルドとテストをトリガーすることです；継続的デプロイメント（CD）は、テストに合格したコードを自動的に本番環境にデプロイすることです。実装方法：Jenkins、GitLab CI、GitHub Actionsなどのツールを使用；コードコミットトリガーを設定；自動テスト（単体テスト、統合テスト）；自動ビルドとパッケージング；異なる環境への自動デプロイメント。利点は、人為的エラーの削減、開発効率の向上、問題の早期発見、リリースサイクルの短縮です。'
    },
    tags: ['CI/CD', '持续集成', '自动化部署'],
    difficulty: 'medium'
  },
  {
    id: 'devops-2',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是Infrastructure as Code（IaC）？有什么优势？',
      ja: 'Infrastructure as Code（IaC）とは何ですか？どのような利点がありますか？'
    },
    answer: {
      zh: 'Infrastructure as Code（IaC）是用代码来管理和配置基础设施，而不是手动操作。常用工具有Terraform、Ansible、CloudFormation等。优势：版本控制，基础设施变更可以追踪；可重复性，同样的代码可以创建相同的环境；自动化，减少手动配置错误；一致性，开发、测试、生产环境保持一致；快速恢复，出问题时可以快速重建环境；协作，团队可以共同维护基础设施代码。IaC让基础设施管理变得像软件开发一样规范和可控。',
      ja: 'Infrastructure as Code（IaC）は、手動操作ではなく、コードを使用してインフラストラクチャを管理・設定することです。一般的なツールには、Terraform、Ansible、CloudFormationなどがあります。利点：バージョン管理、インフラストラクチャの変更を追跡可能；再現性、同じコードで同じ環境を作成可能；自動化、手動設定エラーを削減；一貫性、開発、テスト、本番環境を一致させる；迅速な復旧、問題発生時に環境を素早く再構築可能；協力、チームでインフラストラクチャコードを共同維持可能。IaCは、インフラストラクチャ管理をソフトウェア開発のように規範的で制御可能にします。'
    },
    tags: ['IaC', 'Terraform', '基础设施管理'],
    difficulty: 'medium'
  },
  {
    id: 'devops-3',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是监控和告警？如何设计监控系统？',
      ja: '監視とアラートとは何ですか？監視システムをどのように設計しますか？'
    },
    answer: {
      zh: '监控是实时收集系统运行数据，告警是在出现问题时及时通知相关人员。监控系统设计：1）指标收集，CPU、内存、磁盘、网络等系统指标，应用程序指标；2）数据存储，使用时序数据库如InfluxDB、Prometheus；3）可视化，使用Grafana等工具展示图表；4）告警规则，设置阈值触发告警；5）告警通知，邮件、短信、钉钉等方式通知；6）日志监控，收集应用程序日志；7）链路追踪，监控分布式系统的请求链路。关键是要设置合理的告警阈值，避免告警疲劳。',
      ja: '監視はシステム運行データをリアルタイムで収集し、アラートは問題発生時に関係者に適時通知することです。監視システム設計：1）指標収集、CPU、メモリ、ディスク、ネットワークなどのシステム指標、アプリケーション指標；2）データストレージ、InfluxDB、Prometheusなどの時系列データベースを使用；3）可視化、Grafanaなどのツールを使用してグラフを表示；4）アラートルール、閾値を設定してアラートをトリガー；5）アラート通知、メール、SMS、DingTalkなどで通知；6）ログ監視、アプリケーションログを収集；7）トレーシング、分散システムのリクエストチェーンを監視。重要なのは、合理的なアラート閾値を設定し、アラート疲労を避けることです。'
    },
    tags: ['监控', '告警', 'Prometheus', 'Grafana'],
    difficulty: 'medium'
  },
  {
    id: 'devops-4',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是蓝绿部署和金丝雀部署？它们的区别是什么？',
      ja: 'ブルーグリーンデプロイメントとカナリアデプロイメントとは何ですか？違いは何ですか？'
    },
    answer: {
      zh: '蓝绿部署是准备两套相同的环境，蓝色是当前运行的环境，绿色是新版本环境，部署完成后切换流量；金丝雀部署是先将新版本部署到一小部分服务器上，观察运行情况，没问题再逐步扩大范围。区别：蓝绿部署切换快速但资源消耗大；金丝雀部署风险小但部署时间长。蓝绿部署适合资源充足、需要快速切换的场景；金丝雀部署适合风险敏感、需要渐进式发布的场景。两种方式都可以快速回滚，保证系统稳定性。',
      ja: 'ブルーグリーンデプロイメントは、2つの同じ環境を準備し、ブルーが現在実行中の環境、グリーンが新バージョンの環境で、デプロイメント完了後にトラフィックを切り替えます；カナリアデプロイメントは、新バージョンを一部のサーバーに先にデプロイし、運行状況を観察し、問題がなければ徐々に範囲を拡大します。違い：ブルーグリーンデプロイメントは切り替えが速いがリソース消費が大きい；カナリアデプロイメントはリスクが小さいがデプロイ時間が長い。ブルーグリーンデプロイメントは、リソースが十分で迅速な切り替えが必要な場面に適している；カナリアデプロイメントは、リスクに敏感で段階的リリースが必要な場面に適している。両方の方式とも迅速なロールバックが可能で、システムの安定性を保証します。'
    },
    tags: ['蓝绿部署', '金丝雀部署', '部署策略'],
    difficulty: 'medium'
  },
  {
    id: 'devops-5',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是配置管理？如何实现配置的集中管理？',
      ja: '設定管理とは何ですか？設定の集中管理をどのように実現しますか？'
    },
    answer: {
      zh: '配置管理是对应用程序的配置信息进行统一管理和控制。实现方式：1）配置中心，使用Nacos、Apollo、Consul等工具；2）环境分离，不同环境使用不同配置；3）配置版本控制，配置变更可以追踪和回滚；4）动态配置，运行时可以修改配置不需要重启；5）配置加密，敏感信息如密码要加密存储；6）配置校验，确保配置格式正确；7）配置推送，配置变更自动推送到各个服务。好处是统一管理、动态更新、安全性高、便于维护。',
      ja: '設定管理は、アプリケーションの設定情報を統一的に管理・制御することです。実現方法：1）設定センター、Nacos、Apollo、Consulなどのツールを使用；2）環境分離、異なる環境で異なる設定を使用；3）設定バージョン管理、設定変更を追跡・ロールバック可能；4）動的設定、実行時に設定を変更でき、再起動不要；5）設定暗号化、パスワードなどの機密情報を暗号化して保存；6）設定検証、設定フォーマットが正しいことを確認；7）設定プッシュ、設定変更を各サービスに自動プッシュ。利点は、統一管理、動的更新、高セキュリティ、保守の容易さです。'
    },
    tags: ['配置管理', '配置中心', 'Nacos'],
    difficulty: 'medium'
  },
  {
    id: 'devops-6',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是日志管理？如何实现日志的收集和分析？',
      ja: 'ログ管理とは何ですか？ログの収集と分析をどのように実現しますか？'
    },
    answer: {
      zh: '日志管理是对系统和应用程序产生的日志进行收集、存储、分析和监控。实现方案：1）日志收集，使用Filebeat、Fluentd等Agent收集日志；2）日志传输，使用Kafka、Redis等消息队列传输；3）日志存储，使用Elasticsearch等搜索引擎存储；4）日志分析，使用Kibana、Grafana等工具分析；5）日志格式化，统一日志格式便于解析；6）日志级别，区分ERROR、WARN、INFO、DEBUG；7）日志轮转，定期清理过期日志；8）日志告警，异常日志触发告警。架构通常是ELK（Elasticsearch+Logstash+Kibana）。',
      ja: 'ログ管理は、システムとアプリケーションが生成するログを収集、保存、分析、監視することです。実現方案：1）ログ収集、Filebeat、FluentdなどのAgentを使用してログを収集；2）ログ伝送、Kafka、Redisなどのメッセージキューを使用して伝送；3）ログストレージ、Elasticsearchなどの検索エンジンを使用して保存；4）ログ分析、Kibana、Grafanaなどのツールを使用して分析；5）ログフォーマット化、統一ログフォーマットで解析を容易化；6）ログレベル、ERROR、WARN、INFO、DEBUGを区別；7）ログローテーション、期限切れログを定期的にクリーンアップ；8）ログアラート、異常ログがアラートをトリガー。アーキテクチャは通常ELK（Elasticsearch+Logstash+Kibana）です。'
    },
    tags: ['日志管理', 'ELK', '日志收集'],
    difficulty: 'medium'
  },
  {
    id: 'devops-7',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是容器编排？Kubernetes有什么核心概念？',
      ja: 'コンテナオーケストレーションとは何ですか？Kubernetesの核心概念は何ですか？'
    },
    answer: {
      zh: '容器编排是自动化管理容器的生命周期，包括部署、扩缩容、网络、存储等。Kubernetes核心概念：1）Pod，最小部署单元，包含一个或多个容器；2）Service，提供稳定的网络访问入口；3）Deployment，管理Pod的部署和更新；4）ReplicaSet，确保Pod副本数量；5）Namespace，提供资源隔离；6）ConfigMap和Secret，管理配置和敏感信息；7）Ingress，管理外部访问；8）Volume，提供持久化存储。K8s的好处是自动化运维、高可用性、弹性扩缩容、服务发现和负载均衡。',
      ja: 'コンテナオーケストレーションは、デプロイメント、スケーリング、ネットワーク、ストレージなど、コンテナのライフサイクルを自動化管理することです。Kubernetesの核心概念：1）Pod、最小デプロイメント単位、1つまたは複数のコンテナを含む；2）Service、安定したネットワークアクセスエントリポイントを提供；3）Deployment、Podのデプロイメントと更新を管理；4）ReplicaSet、Podレプリカ数を確保；5）Namespace、リソース分離を提供；6）ConfigMapとSecret、設定と機密情報を管理；7）Ingress、外部アクセスを管理；8）Volume、永続化ストレージを提供。K8sの利点は、自動化運用、高可用性、弾性スケーリング、サービス発見とロードバランシングです。'
    },
    tags: ['容器编排', 'Kubernetes', 'Pod'],
    difficulty: 'hard'
  },
  {
    id: 'devops-8',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是服务网格（Service Mesh）？它解决了什么问题？',
      ja: 'サービスメッシュ（Service Mesh）とは何ですか？どのような問題を解決しますか？'
    },
    answer: {
      zh: '服务网格是专门处理服务间通信的基础设施层，通常以轻量级网络代理的形式部署。解决的问题：1）服务发现，自动发现和连接服务；2）负载均衡，智能分发请求；3）故障处理，熔断、重试、超时控制；4）安全通信，服务间加密通信；5）可观察性，监控、日志、链路追踪；6）流量管理，蓝绿部署、金丝雀发布；7）策略执行，访问控制、速率限制。代表产品：Istio、Linkerd、Consul Connect。服务网格让开发者专注业务逻辑，而不用关心服务间通信的复杂性。',
      ja: 'サービスメッシュは、サービス間通信を専門に処理するインフラストラクチャ層で、通常軽量ネットワークプロキシの形で展開されます。解決する問題：1）サービス発見、サービスを自動発見・接続；2）ロードバランシング、リクエストをインテリジェントに分散；3）障害処理、サーキットブレーカー、リトライ、タイムアウト制御；4）セキュア通信、サービス間暗号化通信；5）可観測性、監視、ログ、トレーシング；6）トラフィック管理、ブルーグリーンデプロイメント、カナリアリリース；7）ポリシー実行、アクセス制御、レート制限。代表的な製品：Istio、Linkerd、Consul Connect。サービスメッシュにより、開発者はビジネスロジックに集中でき、サービス間通信の複雑さを気にする必要がありません。'
    },
    tags: ['服务网格', 'Istio', '微服务'],
    difficulty: 'hard'
  },
  {
    id: 'devops-9',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是GitOps？它有什么优势？',
      ja: 'GitOpsとは何ですか？どのような利点がありますか？'
    },
    answer: {
      zh: 'GitOps是一种部署和运维方式，使用Git作为单一真实来源，通过Git操作来管理基础设施和应用程序的部署。工作流程：1）代码和配置都存储在Git仓库；2）提交代码触发CI/CD流水线；3）自动化工具监控Git仓库变化；4）自动同步到目标环境。优势：版本控制，所有变更都有记录；回滚简单，Git回滚即可；安全性高，通过Git权限控制访问；可追溯性，清楚知道谁在什么时候做了什么；一致性，声明式配置确保环境一致。代表工具：ArgoCD、Flux、Jenkins X。',
      ja: 'GitOpsは、Gitを単一の真実のソースとして使用し、Git操作を通じてインフラストラクチャとアプリケーションのデプロイメントを管理するデプロイメントと運用方式です。ワークフロー：1）コードと設定をGitリポジトリに保存；2）コードコミットがCI/CDパイプラインをトリガー；3）自動化ツールがGitリポジトリの変更を監視；4）ターゲット環境に自動同期。利点：バージョン管理、すべての変更が記録される；ロールバックが簡単、Gitロールバックで済む；高セキュリティ、Git権限でアクセスを制御；追跡可能性、誰がいつ何をしたかが明確；一貫性、宣言的設定で環境の一貫性を確保。代表的なツール：ArgoCD、Flux、Jenkins X。'
    },
    tags: ['GitOps', 'ArgoCD', '声明式部署'],
    difficulty: 'medium'
  },
  {
    id: 'devops-10',
    category: 'technical',
    subcategory: 'devops',
    question: {
      zh: '什么是灾难恢复？如何设计灾难恢复方案？',
      ja: '災害復旧とは何ですか？災害復旧方案をどのように設計しますか？'
    },
    answer: {
      zh: '灾难恢复是在系统发生重大故障时，快速恢复业务运行的能力。设计方案：1）备份策略，定期备份数据和配置；2）多地部署，在不同地理位置部署系统；3）数据同步，实时或定期同步数据到备份站点；4）故障检测，监控系统健康状态；5）自动切换，故障时自动切换到备份系统；6）恢复测试，定期测试恢复流程；7）文档管理，详细的恢复操作手册。关键指标：RTO（恢复时间目标）和RPO（恢复点目标）。要根据业务重要性选择合适的恢复等级。',
      ja: '災害復旧は、システムに重大な障害が発生した際に、ビジネス運営を迅速に復旧する能力です。設計方案：1）バックアップ戦略、データと設定を定期的にバックアップ；2）多地点展開、異なる地理的位置にシステムを展開；3）データ同期、リアルタイムまたは定期的にデータをバックアップサイトに同期；4）障害検出、システムの健康状態を監視；5）自動切り替え、障害時にバックアップシステムに自動切り替え；6）復旧テスト、復旧プロセスを定期的にテスト；7）文書管理、詳細な復旧操作マニュアル。重要指標：RTO（復旧時間目標）とRPO（復旧ポイント目標）。ビジネスの重要性に応じて適切な復旧レベルを選択する必要があります。'
    },
    tags: ['灾难恢复', '备份', '高可用'],
    difficulty: 'medium'
  }
] 