import { Question } from '@/types'

export const frontendQuestions: Question[] = [
  {
    id: 'frontend-1',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '请解释HTML、CSS和JavaScript的作用和关系',
      ja: 'HTML、CSS、JavaScriptの役割と関係を説明してください'
    },
    answer: {
      zh: '这三个是前端开发的基础。HTML就像房子的骨架，负责网页的结构和内容，比如标题、段落、图片这些元素。CSS就像装修，负责网页的样式和布局，比如颜色、字体、位置等等，让网页看起来更美观。JavaScript就像房子的电器，负责网页的交互和动态效果，比如点击按钮、表单验证、动画等等。它们的关系是：HTML提供内容，CSS控制外观，JavaScript实现功能。现在的网页开发都离不开这三个技术，它们相互配合才能做出完整的网页。',
      ja: 'この3つはフロントエンド開発の基礎です。HTMLは家の骨組みのようなもので、ウェブページの構造と内容を担当します。例えば、タイトル、段落、画像などの要素です。CSSは装飾のようなもので、ウェブページのスタイルとレイアウトを担当します。例えば、色、フォント、位置などで、ウェブページをより美しく見せます。JavaScriptは家の電化製品のようなもので、ウェブページのインタラクションと動的効果を担当します。例えば、ボタンクリック、フォーム検証、アニメーションなどです。関係は：HTMLがコンテンツを提供し、CSSが外観を制御し、JavaScriptが機能を実現します。現在のウェブ開発では、この3つの技術が不可欠で、互いに協力して完全なウェブページを作ります。'
    },
    tags: ['HTML', 'CSS', 'JavaScript'],
    difficulty: 'easy'
  },
  {
    id: 'frontend-2',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '什么是响应式设计？如何实现？',
      ja: 'レスポンシブデザインとは何ですか？どのように実装しますか？'
    },
    answer: {
      zh: '响应式设计就是让网页能够在不同的设备上都能正常显示和使用，比如手机、平板、电脑。实现方法主要有几种：首先是使用CSS的媒体查询（Media Query），可以根据屏幕大小应用不同的样式；然后是使用弹性布局，比如flexbox和grid，让元素能够自动调整大小；还有就是使用相对单位，比如百分比、em、rem，而不是固定的像素值。另外，图片也要做响应式处理，可以用max-width: 100%让图片自适应容器大小。现在很多CSS框架比如Bootstrap都提供了响应式的组件，用起来很方便。',
      ja: 'レスポンシブデザインは、ウェブページが異なるデバイスで正常に表示・使用できるようにすることです。例えば、スマートフォン、タブレット、パソコンなどです。実装方法は主にいくつかあります：まず、CSSのメディアクエリ（Media Query）を使って、画面サイズに応じて異なるスタイルを適用します。次に、flexboxやgridなどのフレキシブルレイアウトを使って、要素が自動的にサイズを調整できるようにします。それから、固定のピクセル値ではなく、パーセンテージ、em、remなどの相対単位を使います。また、画像もレスポンシブ処理が必要で、max-width: 100%を使って画像をコンテナサイズに自動調整できます。現在、Bootstrapなどの多くのCSSフレームワークがレスポンシブコンポーネントを提供していて、使いやすいです。'
    },
    tags: ['响应式设计', 'CSS', '媒体查询'],
    difficulty: 'medium'
  },
  {
    id: 'frontend-3',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '解释JavaScript中的作用域和闭包',
      ja: 'JavaScriptのスコープとクロージャを説明してください'
    },
    answer: {
      zh: '作用域就是变量的可访问范围。JavaScript有全局作用域和局部作用域。全局作用域的变量在整个程序中都能访问，局部作用域的变量只能在特定的函数或代码块中访问。闭包是指内部函数可以访问外部函数的变量，即使外部函数已经执行完毕。比如说，一个函数返回另一个函数，返回的函数还能使用外部函数的变量，这就是闭包。闭包的好处是可以创建私有变量，实现数据封装；坏处是可能导致内存泄漏，因为变量不会被垃圾回收。闭包在JavaScript中很常见，比如事件处理、模块化编程都会用到。',
      ja: 'スコープは変数のアクセス可能範囲です。JavaScriptにはグローバルスコープとローカルスコープがあります。グローバルスコープの変数はプログラム全体でアクセスでき、ローカルスコープの変数は特定の関数やコードブロック内でのみアクセスできます。クロージャは、内部関数が外部関数の変数にアクセスできることで、外部関数が実行完了した後でもアクセスできます。例えば、ある関数が別の関数を返し、返された関数が外部関数の変数を使用できる場合、これがクロージャです。クロージャの利点は、プライベート変数を作成してデータのカプセル化を実現できることです。欠点は、変数がガベージコレクションされないため、メモリリークを引き起こす可能性があることです。クロージャはJavaScriptでよく使われ、イベント処理やモジュール化プログラミングなどで使用されます。'
    },
    tags: ['JavaScript', '作用域', '闭包'],
    difficulty: 'medium'
  },
  {
    id: 'frontend-4',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '什么是React？它的主要特点是什么？',
      ja: 'Reactとは何ですか？主な特徴は何ですか？'
    },
    answer: {
      zh: 'React是Facebook开发的一个JavaScript库，主要用来构建用户界面。React的主要特点有几个：首先是组件化开发，把UI拆分成独立的组件，每个组件负责自己的状态和渲染，这样代码更好维护和复用。然后是虚拟DOM，React会在内存中维护一个虚拟的DOM树，当数据变化时，先更新虚拟DOM，然后通过diff算法找出最小的变化，最后更新真实DOM，这样性能更好。还有就是单向数据流，数据从父组件流向子组件，状态管理更清晰。React还有丰富的生态系统，比如Redux用于状态管理，React Router用于路由等。',
      ja: 'ReactはFacebookが開発したJavaScriptライブラリで、主にユーザーインターフェースの構築に使用されます。Reactの主な特徴はいくつかあります：まず、コンポーネント化開発です。UIを独立したコンポーネントに分割し、各コンポーネントが自分の状態とレンダリングを担当するので、コードの保守と再利用が容易になります。次に、仮想DOMです。Reactはメモリ内に仮想DOM木を維持し、データが変化すると、まず仮想DOMを更新し、diffアルゴリズムで最小の変化を見つけ、最後に実際のDOMを更新します。これによりパフォーマンスが向上します。それから、単方向データフローです。データが親コンポーネントから子コンポーネントに流れ、状態管理がより明確になります。Reactには豊富なエコシステムもあり、例えば状態管理にRedux、ルーティングにReact Routerなどがあります。'
    },
    tags: ['React', '组件化', '虚拟DOM'],
    difficulty: 'medium'
  },
  {
    id: 'frontend-5',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '解释CSS中的盒模型',
      ja: 'CSSのボックスモデルを説明してください'
    },
    answer: {
      zh: 'CSS盒模型描述了HTML元素的结构，每个元素都可以看作是一个盒子。盒模型从内到外包括：内容（content）、内边距（padding）、边框（border）、外边距（margin）。内容就是元素的实际内容，比如文字或图片；内边距是内容和边框之间的空间；边框是围绕内容和内边距的线；外边距是边框外面的空间，用来控制元素之间的距离。盒模型有两种：标准盒模型和IE盒模型。标准盒模型的width和height只包括内容区域；IE盒模型的width和height包括内容、内边距和边框。可以用box-sizing属性来控制使用哪种盒模型。',
      ja: 'CSSのボックスモデルは、HTML要素の構造を記述し、各要素をボックスとして見ることができます。ボックスモデルは内側から外側に向かって：コンテンツ（content）、パディング（padding）、ボーダー（border）、マージン（margin）を含みます。コンテンツは要素の実際の内容で、例えばテキストや画像です。パディングはコンテンツとボーダーの間のスペースです。ボーダーはコンテンツとパディングを囲む線です。マージンはボーダーの外側のスペースで、要素間の距離を制御します。ボックスモデルには2種類あります：標準ボックスモデルとIEボックスモデルです。標準ボックスモデルのwidthとheightはコンテンツ領域のみを含みます。IEボックスモデルのwidthとheightはコンテンツ、パディング、ボーダーを含みます。box-sizingプロパティでどのボックスモデルを使用するかを制御できます。'
    },
    tags: ['CSS', '盒模型', 'box-sizing'],
    difficulty: 'medium'
  },
  {
    id: 'frontend-6',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '什么是异步编程？Promise和async/await的区别是什么？',
      ja: '非同期プログラミングとは何ですか？PromiseとAsync/awaitの違いは何ですか？'
    },
    answer: {
      zh: '异步编程就是不阻塞主线程的编程方式。在JavaScript中，比如网络请求、文件读取这些操作比较耗时，如果用同步方式，页面就会卡住。异步编程可以让这些操作在后台执行，主线程继续处理其他任务。Promise是ES6引入的异步解决方案，它有三种状态：pending（进行中）、fulfilled（成功）、rejected（失败）。Promise用.then()和.catch()来处理结果。async/await是ES2017引入的，它是Promise的语法糖，让异步代码看起来像同步代码。async函数返回Promise，await用来等待Promise的结果。相比Promise，async/await的代码更简洁，更容易理解和调试。',
      ja: '非同期プログラミングは、メインスレッドをブロックしないプログラミング方式です。JavaScriptでは、ネットワークリクエストやファイル読み取りなどの操作は時間がかかるため、同期方式を使うとページがフリーズしてしまいます。非同期プログラミングでは、これらの操作をバックグラウンドで実行し、メインスレッドが他のタスクを処理し続けることができます。PromiseはES6で導入された非同期解決方案で、3つの状態があります：pending（進行中）、fulfilled（成功）、rejected（失敗）。Promiseは.then()と.catch()で結果を処理します。async/awaitはES2017で導入され、Promiseのシンタックスシュガーで、非同期コードを同期コードのように見せます。async関数はPromiseを返し、awaitはPromiseの結果を待ちます。Promiseと比べて、async/awaitのコードはより簡潔で、理解しやすく、デバッグしやすいです。'
    },
    tags: ['异步编程', 'Promise', 'async/await'],
    difficulty: 'medium'
  },
  {
    id: 'frontend-7',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '什么是Webpack？它的作用是什么？',
      ja: 'Webpackとは何ですか？その役割は何ですか？'
    },
    answer: {
      zh: 'Webpack是一个现代JavaScript应用程序的静态模块打包器。简单来说，它可以把我们写的多个JavaScript文件、CSS文件、图片等资源打包成一个或几个文件，这样浏览器加载起来更快。Webpack的主要作用有：模块打包，把各种模块（CommonJS、ES6模块等）统一处理；代码转换，通过loader可以把TypeScript转成JavaScript，把Sass转成CSS等；代码优化，可以压缩代码、去除无用代码、代码分割等；开发服务器，提供热更新功能，修改代码后自动刷新页面。Webpack还有插件系统，可以扩展更多功能。现在很多前端框架比如React、Vue都默认使用Webpack。',
      ja: 'Webpackは、現代のJavaScriptアプリケーションの静的モジュールバンドラーです。簡単に言うと、私たちが書いた複数のJavaScriptファイル、CSSファイル、画像などのリソースを1つまたは数個のファイルにバンドルして、ブラウザがより速く読み込めるようにします。Webpackの主な役割は：モジュールバンドリング、様々なモジュール（CommonJS、ES6モジュールなど）を統一処理；コード変換、loaderを通じてTypeScriptをJavaScriptに、SassをCSSになどに変換；コード最適化、コードの圧縮、不要なコードの除去、コード分割など；開発サーバー、ホットリロード機能を提供し、コード修正後に自動的にページを更新します。Webpackにはプラグインシステムもあり、より多くの機能を拡張できます。現在、ReactやVueなどの多くのフロントエンドフレームワークがデフォルトでWebpackを使用しています。'
    },
    tags: ['Webpack', '模块打包', '构建工具'],
    difficulty: 'medium'
  },
  {
    id: 'frontend-8',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '什么是跨域问题？如何解决？',
      ja: 'クロスドメイン問題とは何ですか？どのように解決しますか？'
    },
    answer: {
      zh: '跨域问题是浏览器的同源策略导致的。同源策略要求协议、域名、端口都相同才能访问资源，不同的话就是跨域。比如从http://localhost:3000访问http://localhost:8080的API就是跨域。解决跨域的方法有几种：CORS（跨域资源共享）是最常用的，需要服务器在响应头中添加Access-Control-Allow-Origin等字段；JSONP是利用script标签没有跨域限制的特点，但只支持GET请求；代理服务器，在开发环境中可以配置代理，让前端请求先到代理服务器，再转发到目标服务器；还有postMessage、document.domain等方法。生产环境中一般用CORS或者部署到同一个域名下。',
      ja: 'クロスドメイン問題は、ブラウザの同一オリジンポリシーによって引き起こされます。同一オリジンポリシーは、プロトコル、ドメイン名、ポートがすべて同じでなければリソースにアクセスできないという要求で、異なる場合はクロスドメインになります。例えば、http://localhost:3000からhttp://localhost:8080のAPIにアクセスするのはクロスドメインです。クロスドメインを解決する方法はいくつかあります：CORS（Cross-Origin Resource Sharing）が最もよく使われ、サーバーがレスポンスヘッダーにAccess-Control-Allow-Originなどのフィールドを追加する必要があります；JSONPはscriptタグにクロスドメイン制限がないことを利用しますが、GETリクエストのみサポートします；プロキシサーバーは、開発環境でプロキシを設定し、フロントエンドリクエストをまずプロキシサーバーに送り、その後ターゲットサーバーに転送します；他にもpostMessage、document.domainなどの方法があります。本番環境では一般的にCORSを使用するか、同じドメイン名にデプロイします。'
    },
    tags: ['跨域', 'CORS', '同源策略'],
    difficulty: 'medium'
  },
  {
    id: 'frontend-9',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '什么是状态管理？Redux的工作原理是什么？',
      ja: '状態管理とは何ですか？Reduxの動作原理は何ですか？'
    },
    answer: {
      zh: '状态管理就是管理应用程序中的数据状态。在复杂的前端应用中，组件之间需要共享数据，如果只用组件的state，数据传递会很复杂。Redux是一个状态管理库，它的工作原理是：所有的状态都存储在一个全局的store中；要修改状态，必须dispatch一个action；action是一个描述发生了什么的对象；reducer是一个纯函数，接收当前状态和action，返回新的状态；store会调用reducer来更新状态，然后通知所有订阅的组件。Redux的好处是状态变化可预测，调试方便，支持时间旅行调试。不过Redux的代码比较啰嗦，现在也有其他方案比如Zustand、Recoil等。',
      ja: '状態管理は、アプリケーション内のデータ状態を管理することです。複雑なフロントエンドアプリケーションでは、コンポーネント間でデータを共有する必要があり、コンポーネントのstateだけを使うと、データの受け渡しが複雑になります。Reduxは状態管理ライブラリで、その動作原理は：すべての状態がグローバルなstore内に保存されます；状態を変更するには、actionをdispatchする必要があります；actionは何が起こったかを記述するオブジェクトです；reducerは純粋関数で、現在の状態とactionを受け取り、新しい状態を返します；storeはreducerを呼び出して状態を更新し、その後すべての購読しているコンポーネントに通知します。Reduxの利点は、状態変化が予測可能で、デバッグが便利で、タイムトラベルデバッグをサポートすることです。ただし、Reduxのコードは冗長で、現在はZustand、Recoilなどの他の解決策もあります。'
    },
    tags: ['状态管理', 'Redux', 'store'],
    difficulty: 'hard'
  },
  {
    id: 'frontend-10',
    category: 'technical',
    subcategory: 'frontend',
    question: {
      zh: '什么是性能优化？前端性能优化的方法有哪些？',
      ja: 'パフォーマンス最適化とは何ですか？フロントエンドのパフォーマンス最適化の方法は何ですか？'
    },
    answer: {
      zh: '性能优化就是让网页加载更快、运行更流畅。前端性能优化的方法很多：首先是减少HTTP请求，可以合并CSS、JS文件，使用雪碧图等；然后是压缩资源，压缩CSS、JS、图片文件大小；使用CDN，让用户从最近的服务器获取资源；开启Gzip压缩，减少传输数据量；懒加载，只加载用户看到的内容；代码分割，按需加载JavaScript代码；使用缓存，设置合适的缓存策略；优化图片，选择合适的格式和大小；减少DOM操作，批量操作DOM；使用虚拟滚动处理大量数据。还有就是要监控性能指标，比如FCP、LCP等，持续优化。',
      ja: 'パフォーマンス最適化は、ウェブページの読み込みを高速化し、より滑らかに動作させることです。フロントエンドのパフォーマンス最適化の方法は多くあります：まず、HTTPリクエストを減らすことで、CSS、JSファイルを結合し、スプライト画像を使用するなど；次に、リソースを圧縮し、CSS、JS、画像ファイルのサイズを小さくします；CDNを使用して、ユーザーが最も近いサーバーからリソースを取得できるようにします；Gzip圧縮を有効にして、転送データ量を減らします；遅延読み込みで、ユーザーが見ているコンテンツのみを読み込みます；コード分割で、JavaScriptコードを必要に応じて読み込みます；キャッシュを使用して、適切なキャッシュ戦略を設定します；画像を最適化して、適切な形式とサイズを選択します；DOM操作を減らし、DOMをバッチ操作します；大量のデータを処理するために仮想スクロールを使用します。また、FCP、LCPなどのパフォーマンス指標を監視し、継続的に最適化することも重要です。'
    },
    tags: ['性能优化', '前端优化', 'CDN'],
    difficulty: 'hard'
  }
] 