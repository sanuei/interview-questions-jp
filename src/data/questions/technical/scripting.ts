import { Question } from '@/types'

export const scriptingQuestions: Question[] = [
  {
    id: 'scripting-1',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是Shell脚本？常用的Shell命令有哪些？',
      ja: 'Shellスクリプトとは何ですか？よく使われるShellコマンドは何ですか？'
    },
    answer: {
      zh: 'Shell脚本是在Unix/Linux系统中自动化任务的脚本语言。常用命令：1）文件操作：ls（列出文件）、cp（复制）、mv（移动）、rm（删除）、mkdir（创建目录）；2）文本处理：grep（搜索）、sed（编辑）、awk（处理）、sort（排序）、uniq（去重）；3）系统信息：ps（进程）、top（监控）、df（磁盘使用）、free（内存）；4）网络：ping、curl、wget；5）权限：chmod、chown。Shell脚本特点：简单易学、系统集成好、适合自动化任务。常用的Shell有bash、zsh、fish等。',
      ja: 'ShellスクリプトはUnix/Linuxシステムでタスクを自動化するスクリプト言語です。よく使われるコマンド：1）ファイル操作：ls（ファイル一覧）、cp（コピー）、mv（移動）、rm（削除）、mkdir（ディレクトリ作成）；2）テキスト処理：grep（検索）、sed（編集）、awk（処理）、sort（ソート）、uniq（重複除去）；3）システム情報：ps（プロセス）、top（監視）、df（ディスク使用量）、free（メモリ）；4）ネットワーク：ping、curl、wget；5）権限：chmod、chown。Shellスクリプトの特徴：簡単で学びやすい、システム統合が良い、自動化タスクに適している。よく使われるShellにはbash、zsh、fishなどがあります。'
    },
    tags: ['Shell脚本', 'Bash', 'Linux命令', '自动化'],
    difficulty: 'medium'
  },
  {
    id: 'scripting-2',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是Python脚本？Python在自动化中的应用有哪些？',
      ja: 'Pythonスクリプトとは何ですか？自動化でのPythonの応用は何ですか？'
    },
    answer: {
      zh: 'Python脚本是用Python语言编写的自动化程序。Python在自动化中的应用：1）系统管理：使用os、subprocess模块执行系统命令；2）文件处理：批量重命名、格式转换、日志分析；3）网络爬虫：使用requests、BeautifulSoup获取网页数据；4）数据处理：使用pandas、numpy处理Excel、CSV文件；5）API调用：自动化API测试、数据同步；6）定时任务：使用schedule库定时执行任务；7）GUI自动化：使用selenium自动化浏览器操作。Python优势：语法简洁、库丰富、跨平台、社区活跃。',
      ja: 'Pythonスクリプトは、Python言語で書かれた自動化プログラムです。自動化でのPythonの応用：1）システム管理：os、subprocessモジュールを使用してシステムコマンドを実行；2）ファイル処理：一括リネーム、フォーマット変換、ログ分析；3）ウェブスクレイピング：requests、BeautifulSoupを使用してウェブページデータを取得；4）データ処理：pandas、numpyを使用してExcel、CSVファイルを処理；5）API呼び出し：自動化APIテスト、データ同期；6）定期タスク：scheduleライブラリを使用してタスクを定期実行；7）GUI自動化：seleniumを使用してブラウザ操作を自動化。Pythonの利点：構文が簡潔、ライブラリが豊富、クロスプラットフォーム、コミュニティが活発。'
    },
    tags: ['Python', '自动化脚本', '数据处理', '网络爬虫'],
    difficulty: 'medium'
  },
  {
    id: 'scripting-3',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是PowerShell？PowerShell和传统命令行的区别是什么？',
      ja: 'PowerShellとは何ですか？PowerShellと従来のコマンドラインの違いは何ですか？'
    },
    answer: {
      zh: 'PowerShell是微软开发的面向对象的命令行工具和脚本语言。与传统命令行的区别：1）面向对象，处理的是.NET对象而不是文本；2）管道传递对象，可以直接访问对象属性和方法；3）强类型，支持.NET类型系统；4）内置帮助系统，Get-Help命令获取详细帮助；5）别名系统，兼容传统命令；6）远程管理，可以管理远程计算机。常用命令：Get-Process、Get-Service、Get-ChildItem、Set-Location、Copy-Item。PowerShell Core是跨平台版本，支持Linux和macOS。适用场景：Windows系统管理、自动化部署、云管理。',
      ja: 'PowerShellは、Microsoftが開発したオブジェクト指向のコマンドラインツールとスクリプト言語です。従来のコマンドラインとの違い：1）オブジェクト指向、テキストではなく.NETオブジェクトを処理；2）パイプラインでオブジェクトを渡し、オブジェクトのプロパティとメソッドに直接アクセス可能；3）強い型付け、.NET型システムをサポート；4）内蔵ヘルプシステム、Get-Helpコマンドで詳細なヘルプを取得；5）エイリアスシステム、従来のコマンドと互換性；6）リモート管理、リモートコンピューターを管理可能。よく使われるコマンド：Get-Process、Get-Service、Get-ChildItem、Set-Location、Copy-Item。PowerShell Coreはクロスプラットフォーム版で、LinuxとmacOSをサポート。適用場面：Windowsシステム管理、自動化デプロイメント、クラウド管理。'
    },
    tags: ['PowerShell', 'Windows管理', '面向对象', '自动化'],
    difficulty: 'medium'
  },
  {
    id: 'scripting-4',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是JavaScript在服务器端的应用？Node.js脚本有什么特点？',
      ja: 'JavaScriptのサーバーサイドでの応用は何ですか？Node.jsスクリプトの特徴は何ですか？'
    },
    answer: {
      zh: 'JavaScript在服务器端主要通过Node.js运行。Node.js脚本特点：1）事件驱动，非阻塞I/O，适合高并发；2）单线程，但通过事件循环处理多个请求；3）npm包管理，丰富的第三方库；4）跨平台，支持Windows、Linux、macOS；5）快速开发，前后端使用同一语言。应用场景：1）Web服务器，使用Express框架；2）API开发，RESTful API、GraphQL；3）实时应用，WebSocket、聊天室；4）构建工具，Webpack、Gulp；5）自动化脚本，文件处理、系统管理；6）微服务，轻量级服务。Node.js适合I/O密集型应用，不适合CPU密集型任务。',
      ja: 'JavaScriptのサーバーサイドでの応用は主にNode.jsを通じて実行されます。Node.jsスクリプトの特徴：1）イベント駆動、ノンブロッキングI/O、高並行性に適している；2）シングルスレッドだが、イベントループで複数のリクエストを処理；3）npmパッケージ管理、豊富なサードパーティライブラリ；4）クロスプラットフォーム、Windows、Linux、macOSをサポート；5）高速開発、フロントエンドとバックエンドで同じ言語を使用。応用場面：1）Webサーバー、Expressフレームワークを使用；2）API開発、RESTful API、GraphQL；3）リアルタイムアプリケーション、WebSocket、チャットルーム；4）ビルドツール、Webpack、Gulp；5）自動化スクリプト、ファイル処理、システム管理；6）マイクロサービス、軽量サービス。Node.jsはI/O集約型アプリケーションに適しており、CPU集約型タスクには不向きです。'
    },
    tags: ['Node.js', 'JavaScript', '服务器端', '事件驱动'],
    difficulty: 'medium'
  },
  {
    id: 'scripting-5',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是正则表达式？在脚本中如何使用正则表达式？',
      ja: '正規表現とは何ですか？スクリプトで正規表現をどのように使用しますか？'
    },
    answer: {
      zh: '正则表达式是用于匹配字符串模式的强大工具。基本语法：1）字符匹配：.（任意字符）、\\d（数字）、\\w（字母数字）、\\s（空白字符）；2）量词：*（0次或多次）、+（1次或多次）、?（0次或1次）、{n}（n次）；3）位置：^（行首）、$（行尾）、\\b（单词边界）；4）分组：()用于分组，|表示或。在脚本中的应用：1）数据验证，验证邮箱、电话号码格式；2）文本处理，查找替换、提取信息；3）日志分析，提取关键信息；4）输入过滤，清理用户输入。各语言支持：Python的re模块、JavaScript的RegExp、Shell的grep等。',
      ja: '正規表現は、文字列パターンをマッチングするための強力なツールです。基本構文：1）文字マッチング：.（任意の文字）、\\d（数字）、\\w（英数字）、\\s（空白文字）；2）量詞：*（0回以上）、+（1回以上）、?（0回または1回）、{n}（n回）；3）位置：^（行頭）、$（行末）、\\b（単語境界）；4）グループ化：()でグループ化、|はまたは。スクリプトでの応用：1）データ検証、メールアドレス、電話番号の形式を検証；2）テキスト処理、検索置換、情報抽出；3）ログ分析、重要な情報を抽出；4）入力フィルタリング、ユーザー入力をクリーンアップ。各言語でのサポート：Pythonのreモジュール、JavaScriptのRegExp、Shellのgrepなど。'
    },
    tags: ['正则表达式', '模式匹配', '文本处理', '数据验证'],
    difficulty: 'medium'
  },
  {
    id: 'scripting-6',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是脚本调试？如何调试和排错脚本？',
      ja: 'スクリプトデバッグとは何ですか？スクリプトをどのようにデバッグ・トラブルシューティングしますか？'
    },
    answer: {
      zh: '脚本调试是发现和修复脚本错误的过程。调试方法：1）打印调试，使用print、echo输出变量值；2）日志记录，记录程序执行过程；3）断点调试，使用调试器逐步执行；4）异常处理，try-catch捕获错误；5）单元测试，测试脚本的各个部分。常见错误类型：1）语法错误，拼写错误、缺少符号；2）逻辑错误，程序逻辑不正确；3）运行时错误，除零、文件不存在等；4）环境错误，路径、权限问题。调试技巧：从简单开始、逐步复杂、使用版本控制、编写测试用例。工具：IDE调试器、linter、性能分析器。',
      ja: 'スクリプトデバッグは、スクリプトのエラーを発見・修正するプロセスです。デバッグ方法：1）プリントデバッグ、print、echoを使用して変数値を出力；2）ログ記録、プログラム実行過程を記録；3）ブレークポイントデバッグ、デバッガーを使用して段階的に実行；4）例外処理、try-catchでエラーをキャッチ；5）単体テスト、スクリプトの各部分をテスト。よくあるエラータイプ：1）構文エラー、スペルミス、記号不足；2）論理エラー、プログラム論理が不正確；3）実行時エラー、ゼロ除算、ファイル不存在など；4）環境エラー、パス、権限問題。デバッグのコツ：簡単なところから始める、段階的に複雑にする、バージョン管理を使用、テストケースを作成。ツール：IDEデバッガー、linter、パフォーマンス分析器。'
    },
    tags: ['脚本调试', '错误排查', '日志记录', '测试'],
    difficulty: 'medium'
  },
  {
    id: 'scripting-7',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是脚本性能优化？如何提高脚本执行效率？',
      ja: 'スクリプトパフォーマンス最適化とは何ですか？スクリプトの実行効率をどのように向上させますか？'
    },
    answer: {
      zh: '脚本性能优化是提高脚本执行速度和资源利用率的技术。优化方法：1）算法优化，使用更高效的算法和数据结构；2）减少循环，避免不必要的重复计算；3）缓存结果，避免重复计算相同的值；4）并行处理，使用多进程或多线程；5）内存管理，及时释放不用的变量；6）I/O优化，批量处理文件操作；7）使用内置函数，比自定义函数更快。性能分析：1）时间测量，记录执行时间；2）内存监控，检查内存使用；3）性能分析器，找出瓶颈；4）基准测试，比较不同实现。语言特定优化：Python使用NumPy、Cython，JavaScript使用V8引擎特性。',
      ja: 'スクリプトパフォーマンス最適化は、スクリプトの実行速度とリソース利用率を向上させる技術です。最適化方法：1）アルゴリズム最適化、より効率的なアルゴリズムとデータ構造を使用；2）ループ削減、不要な重複計算を避ける；3）結果キャッシュ、同じ値の重複計算を避ける；4）並列処理、マルチプロセスまたはマルチスレッドを使用；5）メモリ管理、不要な変数を適時解放；6）I/O最適化、ファイル操作をバッチ処理；7）内蔵関数使用、カスタム関数より高速。パフォーマンス分析：1）時間測定、実行時間を記録；2）メモリ監視、メモリ使用量をチェック；3）パフォーマンス分析器、ボトルネックを発見；4）ベンチマークテスト、異なる実装を比較。言語固有の最適化：PythonはNumPy、Cythonを使用、JavaScriptはV8エンジンの特性を使用。'
    },
    tags: ['性能优化', '算法优化', '并行处理', '内存管理'],
    difficulty: 'hard'
  },
  {
    id: 'scripting-8',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是脚本安全？如何编写安全的脚本？',
      ja: 'スクリプトセキュリティとは何ですか？安全なスクリプトをどのように作成しますか？'
    },
    answer: {
      zh: '脚本安全是防止脚本被恶意利用或造成安全风险的实践。安全风险：1）代码注入，用户输入被当作代码执行；2）路径遍历，访问不应该访问的文件；3）权限提升，脚本获得过高权限；4）敏感信息泄露，密码、API密钥暴露。安全编程实践：1）输入验证，验证和清理用户输入；2）最小权限原则，只给必要的权限；3）避免硬编码，不在代码中写密码；4）使用参数化查询，防止SQL注入；5）错误处理，不暴露敏感信息；6）安全的临时文件，使用安全的临时目录；7）代码审查，多人检查代码。工具：静态代码分析、安全扫描器、权限管理工具。',
      ja: 'スクリプトセキュリティは、スクリプトが悪意のある利用を受けたり、セキュリティリスクを引き起こすことを防ぐ実践です。セキュリティリスク：1）コードインジェクション、ユーザー入力がコードとして実行される；2）パストラバーサル、アクセスすべきでないファイルにアクセス；3）権限昇格、スクリプトが過度な権限を取得；4）機密情報漏洩、パスワード、APIキーが露出。セキュアプログラミング実践：1）入力検証、ユーザー入力を検証・クリーンアップ；2）最小権限の原則、必要な権限のみ付与；3）ハードコーディング回避、コードにパスワードを書かない；4）パラメータ化クエリ使用、SQLインジェクションを防止；5）エラー処理、機密情報を露出しない；6）安全な一時ファイル、安全な一時ディレクトリを使用；7）コードレビュー、複数人でコードをチェック。ツール：静的コード分析、セキュリティスキャナー、権限管理ツール。'
    },
    tags: ['脚本安全', '输入验证', '权限管理', '代码注入'],
    difficulty: 'hard'
  },
  {
    id: 'scripting-9',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是脚本部署和版本管理？如何管理脚本的生命周期？',
      ja: 'スクリプトデプロイメントとバージョン管理とは何ですか？スクリプトのライフサイクルをどのように管理しますか？'
    },
    answer: {
      zh: '脚本部署和版本管理是管理脚本从开发到生产的整个生命周期。版本管理：1）使用Git等版本控制系统；2）语义化版本号，如1.0.0；3）分支管理，开发分支、测试分支、主分支；4）标签管理，标记重要版本；5）变更日志，记录每个版本的变化。部署流程：1）开发环境测试；2）代码审查；3）自动化测试；4）部署到测试环境；5）用户验收测试；6）部署到生产环境。部署方式：1）手动部署，适合小项目；2）自动化部署，使用CI/CD工具；3）容器化部署，使用Docker；4）云部署，使用云平台。配置管理：环境变量、配置文件、密钥管理。',
      ja: 'スクリプトデプロイメントとバージョン管理は、スクリプトを開発から本番まで全体のライフサイクルを管理することです。バージョン管理：1）Gitなどのバージョン管理システムを使用；2）セマンティックバージョニング、例：1.0.0；3）ブランチ管理、開発ブランチ、テストブランチ、メインブランチ；4）タグ管理、重要なバージョンをマーク；5）変更ログ、各バージョンの変更を記録。デプロイメントフロー：1）開発環境でテスト；2）コードレビュー；3）自動化テスト；4）テスト環境にデプロイ；5）ユーザー受け入れテスト；6）本番環境にデプロイ。デプロイメント方法：1）手動デプロイ、小規模プロジェクトに適している；2）自動化デプロイ、CI/CDツールを使用；3）コンテナ化デプロイ、Dockerを使用；4）クラウドデプロイ、クラウドプラットフォームを使用。設定管理：環境変数、設定ファイル、キー管理。'
    },
    tags: ['版本管理', '部署流程', 'CI/CD', '配置管理'],
    difficulty: 'medium'
  },
  {
    id: 'scripting-10',
    category: 'technical',
    subcategory: 'scripting',
    question: {
      zh: '什么是跨平台脚本？如何编写可在多个平台运行的脚本？',
      ja: 'クロスプラットフォームスクリプトとは何ですか？複数のプラットフォームで実行できるスクリプトをどのように作成しますか？'
    },
    answer: {
      zh: '跨平台脚本是能在不同操作系统上运行的脚本。实现方法：1）选择跨平台语言，如Python、JavaScript、Java；2）使用标准库，避免平台特定的API；3）路径处理，使用os.path.join()而不是硬编码路径分隔符；4）环境变量，使用环境变量而不是硬编码路径；5）条件判断，检测操作系统类型执行不同逻辑；6）抽象层，封装平台差异；7）配置文件，外部化平台相关配置。注意事项：1）文件路径分隔符，Windows用\\，Unix用/；2）行结束符，Windows用\\r\\n，Unix用\\n；3）权限系统，Unix有复杂的权限系统；4）命令差异，不同平台命令可能不同。测试：在多个平台上测试脚本。',
      ja: 'クロスプラットフォームスクリプトは、異なるオペレーティングシステムで実行できるスクリプトです。実現方法：1）クロスプラットフォーム言語を選択、Python、JavaScript、Javaなど；2）標準ライブラリを使用、プラットフォーム固有のAPIを避ける；3）パス処理、ハードコードされたパス区切り文字ではなくos.path.join()を使用；4）環境変数、ハードコードされたパスではなく環境変数を使用；5）条件判断、オペレーティングシステムタイプを検出して異なるロジックを実行；6）抽象化層、プラットフォーム差異をカプセル化；7）設定ファイル、プラットフォーム関連設定を外部化。注意事項：1）ファイルパス区切り文字、Windowsは\\、Unixは/；2）行終了文字、Windowsは\\r\\n、Unixは\\n；3）権限システム、Unixには複雑な権限システム；4）コマンド差異、異なるプラットフォームでコマンドが異なる可能性。テスト：複数のプラットフォームでスクリプトをテスト。'
    },
    tags: ['跨平台', '兼容性', '路径处理', '环境变量'],
    difficulty: 'medium'
  }
] 