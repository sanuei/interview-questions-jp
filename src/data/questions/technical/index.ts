import { Question } from '@/types'
import { javaQuestions } from './java'
import { frontendQuestions } from './frontend'
import { databaseQuestions } from './database'
import { cloudQuestions } from './cloud'
import { systemDesignQuestions } from './system-design'
import { devopsQuestions } from './devops'
import { securityQuestions } from './security'
import { algorithmsQuestions } from './algorithms'
import { reactQuestions } from './react'
import { awsQuestions } from './aws'
import { scriptingQuestions } from './scripting'

// 后端开发问题（扩展版本）
export const backendQuestions: Question[] = [
  {
    id: 'backend-1',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是RESTful API？请解释其设计原则',
      ja: 'RESTful APIとは何ですか？その設計原則を説明してください'
    },
    answer: {
      zh: 'RESTful API是基于REST架构风格的Web API。REST的设计原则有几个：首先是无状态，每个请求都包含完整的信息，服务器不保存客户端的状态；然后是统一接口，使用标准的HTTP方法，GET用于获取数据，POST用于创建，PUT用于更新，DELETE用于删除；还有资源标识，每个资源都有唯一的URL；资源表现，同一个资源可以用不同格式表示，比如JSON、XML；分层系统，客户端不需要知道服务器的内部结构；可缓存，响应要标明是否可以缓存。RESTful API的好处是简单易懂，标准化，容易维护。',
      ja: 'RESTful APIはRESTアーキテクチャスタイルに基づくWeb APIです。RESTの設計原則はいくつかあります：まず、ステートレスで、各リクエストに完全な情報を含み、サーバーはクライアントの状態を保存しません。次に、統一インターフェースで、標準的なHTTPメソッドを使用し、GETはデータ取得、POSTは作成、PUTは更新、DELETEは削除に使います。それから、リソース識別で、各リソースに一意のURLがあります。リソース表現で、同じリソースを異なる形式（JSON、XMLなど）で表現できます。階層システムで、クライアントはサーバーの内部構造を知る必要がありません。キャッシュ可能で、レスポンスにキャッシュ可能かどうかを示す必要があります。RESTful APIの利点は、シンプルで理解しやすく、標準化されていて、保守が容易なことです。'
    },
    tags: ['REST', 'API設計', 'HTTP'],
    difficulty: 'medium'
  },
  {
    id: 'backend-2',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是数据库索引？它是如何工作的？',
      ja: 'データベースインデックスとは何ですか？どのように動作しますか？'
    },
    answer: {
      zh: '数据库索引就像书的目录，可以快速找到数据。没有索引的话，数据库要从头到尾扫描整个表，有了索引就可以直接定位到数据位置。索引的工作原理是：数据库会为索引列创建一个排序的数据结构，比如B+树，这样查找的时候可以用二分查找，时间复杂度从O(n)降低到O(log n)。索引的好处是查询速度快，但是也有缺点：占用额外的存储空间，增删改操作会变慢，因为要同时更新索引。所以索引要适度使用，经常查询的列可以建索引，经常更新的列就不太适合。',
      ja: 'データベースインデックスは本の目次のようなもので、データを素早く見つけることができます。インデックスがないと、データベースは表全体を最初から最後まで走査する必要がありますが、インデックスがあれば直接データの位置を特定できます。インデックスの動作原理は：データベースがインデックス列に対してソートされたデータ構造（B+木など）を作成し、検索時に二分探索を使えるようにして、時間計算量をO(n)からO(log n)に削減します。インデックスの利点は検索速度が速いことですが、欠点もあります：追加のストレージ容量を占有し、挿入・削除・更新操作が遅くなります。インデックスも同時に更新する必要があるからです。そのため、インデックスは適度に使用し、頻繁に検索する列にはインデックスを作成し、頻繁に更新する列にはあまり適していません。'
    },
    tags: ['数据库', '索引', '性能优化'],
    difficulty: 'medium'
  },
  {
    id: 'backend-3',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '解释什么是缓存？常见的缓存策略有哪些？',
      ja: 'キャッシュとは何ですか？一般的なキャッシュ戦略は何ですか？'
    },
    answer: {
      zh: '缓存就是把经常访问的数据存储在快速访问的地方，避免重复的计算或数据库查询。常见的缓存策略有几种：LRU（最近最少使用），当缓存满了的时候，删除最久没有使用的数据；LFU（最不常用），删除使用频率最低的数据；FIFO（先进先出），按照进入缓存的顺序删除；TTL（生存时间），设置过期时间，过期后自动删除。缓存的位置也有很多：浏览器缓存、CDN缓存、服务器内存缓存（比如Redis）、数据库缓存等。使用缓存要注意缓存一致性问题，当原始数据更新时，要及时更新或删除缓存。',
      ja: 'キャッシュは、頻繁にアクセスされるデータを高速アクセス可能な場所に保存して、重複する計算やデータベースクエリを避けることです。一般的なキャッシュ戦略はいくつかあります：LRU（Least Recently Used）は、キャッシュが満杯になったときに、最も長い間使用されていないデータを削除します；LFU（Least Frequently Used）は、使用頻度が最も低いデータを削除します；FIFO（First In First Out）は、キャッシュに入った順序で削除します；TTL（Time To Live）は、有効期限を設定し、期限切れ後に自動削除します。キャッシュの場所も多くあります：ブラウザキャッシュ、CDNキャッシュ、サーバーメモリキャッシュ（Redisなど）、データベースキャッシュなど。キャッシュを使用する際は、キャッシュの一貫性問題に注意が必要で、元のデータが更新されたときに、キャッシュを適時に更新または削除する必要があります。'
    },
    tags: ['缓存', 'Redis', '性能优化'],
    difficulty: 'medium'
  },
  {
    id: 'backend-4',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是微服务架构？它的优缺点是什么？',
      ja: 'マイクロサービスアーキテクチャとは何ですか？その利点と欠点は何ですか？'
    },
    answer: {
      zh: '微服务架构是把一个大的应用拆分成多个小的、独立的服务，每个服务负责特定的业务功能。优点有：独立部署，每个服务可以独立开发、测试、部署；技术栈自由，不同服务可以用不同的技术；扩展性好，可以针对性地扩展某个服务；故障隔离，一个服务出问题不会影响其他服务。缺点也很明显：系统复杂度增加，需要处理服务间通信、数据一致性等问题；运维成本高，需要管理更多的服务实例；网络延迟，服务间调用会有网络开销；调试困难，问题可能涉及多个服务。微服务适合大型、复杂的应用，小项目用单体架构就够了。',
      ja: 'マイクロサービスアーキテクチャは、大きなアプリケーションを複数の小さな独立したサービスに分割し、各サービスが特定のビジネス機能を担当することです。利点は：独立デプロイで、各サービスを独立して開発、テスト、デプロイできます；技術スタックの自由度で、異なるサービスで異なる技術を使用できます；拡張性が良く、特定のサービスを対象的に拡張できます；障害分離で、一つのサービスに問題があっても他のサービスに影響しません。欠点も明らかです：システムの複雑度が増加し、サービス間通信、データ一貫性などの問題を処理する必要があります；運用コストが高く、より多くのサービスインスタンスを管理する必要があります；ネットワーク遅延で、サービス間呼び出しにネットワークオーバーヘッドがあります；デバッグが困難で、問題が複数のサービスに関わる可能性があります。マイクロサービスは大型で複雑なアプリケーションに適しており、小さなプロジェクトにはモノリシックアーキテクチャで十分です。'
    },
    tags: ['微服务', '架构设计', '分布式'],
    difficulty: 'hard'
  },
  {
    id: 'backend-5',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是SQL注入攻击？如何防范？',
      ja: 'SQLインジェクション攻撃とは何ですか？どのように防止しますか？'
    },
    answer: {
      zh: 'SQL注入攻击是指攻击者通过在输入中插入恶意的SQL代码，来执行非法的数据库操作。比如在登录表单中输入特殊的字符串，绕过身份验证或者获取敏感数据。防范方法有几种：使用参数化查询或预编译语句，这样用户输入会被当作参数而不是SQL代码；输入验证，检查用户输入的格式和内容；最小权限原则，数据库账户只给必要的权限；输入过滤，过滤掉危险的字符；使用ORM框架，它们通常内置了防SQL注入的机制；错误处理，不要在错误信息中暴露数据库结构。SQL注入是很严重的安全漏洞，一定要重视。',
      ja: 'SQLインジェクション攻撃は、攻撃者が入力に悪意のあるSQLコードを挿入して、不正なデータベース操作を実行することです。例えば、ログインフォームに特殊な文字列を入力して、認証をバイパスしたり、機密データを取得したりします。防止方法はいくつかあります：パラメータ化クエリやプリペアドステートメントを使用して、ユーザー入力をパラメータとして扱い、SQLコードとして扱わないようにします；入力検証で、ユーザー入力の形式と内容をチェックします；最小権限の原則で、データベースアカウントに必要な権限のみを与えます；入力フィルタリングで、危険な文字を除去します；ORMフレームワークを使用して、通常はSQLインジェクション防止機能が内蔵されています；エラー処理で、エラーメッセージでデータベース構造を露出しないようにします。SQLインジェクションは非常に深刻なセキュリティ脆弱性なので、必ず重視する必要があります。'
    },
    tags: ['SQL注入', '安全', '数据库'],
    difficulty: 'medium'
  },
  {
    id: 'backend-6',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是消息队列？它的作用是什么？',
      ja: 'メッセージキューとは何ですか？その役割は何ですか？'
    },
    answer: {
      zh: '消息队列是一种异步通信机制，发送者把消息放到队列中，接收者从队列中取出消息处理。它的作用有：解耦，发送者和接收者不需要直接交互；异步处理，不需要等待处理结果，提高响应速度；削峰填谷，处理突发的大量请求；可靠性，消息不会丢失，可以重试处理；扩展性，可以增加更多的消费者来处理消息。常见的消息队列有RabbitMQ、Kafka、Redis等。使用场景比如：用户注册后发送欢迎邮件、订单处理、日志收集、数据同步等。消息队列要注意消息的顺序性、重复处理、死信队列等问题。',
      ja: 'メッセージキューは非同期通信メカニズムで、送信者がメッセージをキューに入れ、受信者がキューからメッセージを取り出して処理します。その役割は：デカップリングで、送信者と受信者が直接やり取りする必要がありません；非同期処理で、処理結果を待つ必要がなく、レスポンス速度を向上させます；ピークカットで、突発的な大量リクエストを処理します；信頼性で、メッセージが失われることがなく、再試行処理が可能です；拡張性で、より多くのコンシューマーを追加してメッセージを処理できます。一般的なメッセージキューには、RabbitMQ、Kafka、Redisなどがあります。使用シーンは例えば：ユーザー登録後のウェルカムメール送信、注文処理、ログ収集、データ同期などです。メッセージキューでは、メッセージの順序性、重複処理、デッドレターキューなどの問題に注意する必要があります。'
    },
    tags: ['消息队列', '异步处理', '系统架构'],
    difficulty: 'medium'
  },
  {
    id: 'backend-7',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是负载均衡？常见的负载均衡算法有哪些？',
      ja: 'ロードバランシングとは何ですか？一般的なロードバランシングアルゴリズムは何ですか？'
    },
    answer: {
      zh: '负载均衡就是把请求分发到多个服务器上，避免单个服务器过载。常见的负载均衡算法有：轮询（Round Robin），按顺序分发请求到每个服务器；加权轮询，根据服务器性能给不同的权重；最少连接数，把请求分发到连接数最少的服务器；加权最少连接数，结合权重和连接数；IP哈希，根据客户端IP计算哈希值，确保同一IP总是访问同一服务器；随机算法，随机选择服务器。负载均衡可以在不同层次实现：硬件负载均衡器、软件负载均衡（比如Nginx）、DNS负载均衡、应用层负载均衡等。负载均衡的好处是提高可用性、扩展性和性能。',
      ja: 'ロードバランシングは、リクエストを複数のサーバーに分散して、単一のサーバーが過負荷になることを避けることです。一般的なロードバランシングアルゴリズムは：ラウンドロビン（Round Robin）で、順番に各サーバーにリクエストを分散します；重み付きラウンドロビンで、サーバーの性能に応じて異なる重みを付けます；最少接続数で、接続数が最も少ないサーバーにリクエストを分散します；重み付き最少接続数で、重みと接続数を組み合わせます；IPハッシュで、クライアントIPからハッシュ値を計算し、同じIPが常に同じサーバーにアクセスするようにします；ランダムアルゴリズムで、ランダムにサーバーを選択します。ロードバランシングは異なるレベルで実装できます：ハードウェアロードバランサー、ソフトウェアロードバランシング（Nginxなど）、DNSロードバランシング、アプリケーション層ロードバランシングなど。ロードバランシングの利点は、可用性、拡張性、パフォーマンスの向上です。'
    },
    tags: ['负载均衡', 'Nginx', '高可用'],
    difficulty: 'medium'
  },
  {
    id: 'backend-8',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是事务？ACID特性是什么？',
      ja: 'トランザクションとは何ですか？ACID特性とは何ですか？'
    },
    answer: {
      zh: '事务是数据库操作的一个逻辑单元，要么全部成功，要么全部失败。ACID是事务的四个基本特性：原子性（Atomicity），事务中的所有操作要么全部完成，要么全部不做；一致性（Consistency），事务执行前后，数据库都处于一致状态；隔离性（Isolation），并发执行的事务不会相互干扰；持久性（Durability），事务一旦提交，结果就永久保存。事务的隔离级别有四种：读未提交、读已提交、可重复读、串行化。级别越高，数据一致性越好，但并发性能越差。在实际应用中，需要根据业务需求选择合适的隔离级别。',
      ja: 'トランザクションは、データベース操作の論理単位で、すべて成功するか、すべて失敗するかのどちらかです。ACIDはトランザクションの4つの基本特性です：原子性（Atomicity）で、トランザクション内のすべての操作が完全に実行されるか、まったく実行されないかのどちらかです；一貫性（Consistency）で、トランザクション実行前後で、データベースが一貫した状態にあります；分離性（Isolation）で、並行実行されるトランザクションが互いに干渉しません；持続性（Durability）で、トランザクションが一度コミットされると、結果が永続的に保存されます。トランザクションの分離レベルには4つあります：READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ、SERIALIZABLE。レベルが高いほど、データの一貫性が良くなりますが、並行性能は悪くなります。実際のアプリケーションでは、ビジネス要件に応じて適切な分離レベルを選択する必要があります。'
    },
    tags: ['事务', 'ACID', '数据库'],
    difficulty: 'medium'
  },
  {
    id: 'backend-9',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是Docker？它的优势是什么？',
      ja: 'Dockerとは何ですか？その利点は何ですか？'
    },
    answer: {
      zh: 'Docker是一个容器化平台，可以把应用程序和它的依赖打包成一个轻量级、可移植的容器。Docker的优势有：环境一致性，开发、测试、生产环境完全一样，避免了"在我机器上能运行"的问题；资源利用率高，容器比虚拟机更轻量，启动更快；易于部署，一个命令就可以启动应用；扩展性好，可以快速创建多个容器实例；隔离性，不同容器之间相互独立。Docker的核心概念有：镜像（Image）是应用的模板，容器（Container）是镜像的运行实例，仓库（Repository）用来存储镜像。Docker在微服务架构、持续集成、云部署等场景中应用很广泛。',
      ja: 'Dockerは、アプリケーションとその依存関係を軽量で可搬性のあるコンテナにパッケージ化できるコンテナ化プラットフォームです。Dockerの利点は：環境の一貫性で、開発、テスト、本番環境が完全に同じで、「私のマシンでは動く」問題を避けられます；リソース利用率が高く、コンテナは仮想マシンより軽量で、起動が速いです；デプロイが簡単で、一つのコマンドでアプリケーションを起動できます；拡張性が良く、複数のコンテナインスタンスを迅速に作成できます；分離性で、異なるコンテナ間が互いに独立しています。Dockerの核心概念は：イメージ（Image）はアプリケーションのテンプレート、コンテナ（Container）はイメージの実行インスタンス、リポジトリ（Repository）はイメージを保存するために使用されます。Dockerはマイクロサービスアーキテクチャ、継続的インテグレーション、クラウドデプロイなどのシーンで広く応用されています。'
    },
    tags: ['Docker', '容器化', 'DevOps'],
    difficulty: 'medium'
  },
  {
    id: 'backend-10',
    category: 'technical',
    subcategory: 'backend',
    question: {
      zh: '什么是分布式系统？常见的分布式问题有哪些？',
      ja: '分散システムとは何ですか？一般的な分散問題は何ですか？'
    },
    answer: {
      zh: '分布式系统是由多个独立的计算机组成的系统，它们通过网络协作来完成任务。常见的分布式问题有：网络分区，网络故障导致部分节点无法通信；数据一致性，多个节点的数据可能不一致；故障处理，部分节点失效时系统要能继续工作；负载分配，如何合理分配任务到各个节点；时钟同步，不同节点的时间可能不同步。CAP定理说明了分布式系统的三个特性：一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance），只能同时满足两个。常见的解决方案有：使用分布式锁、消息队列、分布式缓存、微服务架构等。分布式系统复杂但能提供更好的性能和可靠性。',
      ja: '分散システムは、複数の独立したコンピューターで構成されるシステムで、ネットワークを通じて協力してタスクを完了します。一般的な分散問題は：ネットワーク分断で、ネットワーク障害により一部のノードが通信できなくなります；データ一貫性で、複数のノードのデータが一致しない可能性があります；障害処理で、一部のノードが失効した時にシステムが継続して動作する必要があります；負荷分散で、タスクを各ノードに合理的に分配する方法；クロック同期で、異なるノードの時間が同期していない可能性があります。CAP定理は、分散システムの3つの特性を説明しています：一貫性（Consistency）、可用性（Availability）、分断耐性（Partition tolerance）で、同時に2つしか満たせません。一般的な解決策には：分散ロック、メッセージキュー、分散キャッシュ、マイクロサービスアーキテクチャなどの使用があります。分散システムは複雑ですが、より良いパフォーマンスと信頼性を提供できます。'
    },
    tags: ['分布式系统', 'CAP定理', '一致性'],
    difficulty: 'hard'
  }
]

// 聚合所有技术问题
export const technicalQuestions: Question[] = [
  ...javaQuestions,
  ...frontendQuestions,
  ...backendQuestions,
  ...databaseQuestions,
  ...cloudQuestions,
  ...systemDesignQuestions,
  ...devopsQuestions,
  ...securityQuestions,
  ...algorithmsQuestions,
  ...reactQuestions,
  ...awsQuestions,
  ...scriptingQuestions
] 