import { Question } from '@/types'

export const questions: Question[] = [
  // 自我介绍类问题
  {
    id: 'self-intro-1',
    category: 'general',
    subcategory: 'self-intro',
    question: {
      zh: '请简单介绍一下你自己',
      ja: 'まず、簡単に自己紹介をお願いします'
    },
    answer: {
      zh: '您好，我是[姓名]，拥有[年数]年的IT行业经验。我专注于[技术领域]，擅长[具体技能]。在之前的工作中，我负责[主要职责]，成功完成了[具体成就]。我对[相关技术]很感兴趣，希望在贵公司能够发挥我的专业技能，同时学习新的技术和业务知识。',
      ja: 'こんにちは、[名前]と申します。IT業界で[年数]年の経験があります。[技術分野]に専念し、[具体的なスキル]を得意としております。前職では[主な責任]を担当し、[具体的な成果]を成功させました。[関連技術]に興味があり、御社で私の専門技能を活かしつつ、新しい技術とビジネス知識を学びたいと思っております。'
    },
    tags: ['自我介绍', '基础问题'],
    difficulty: 'easy'
  },
  {
    id: 'self-intro-2',
    category: 'general',
    subcategory: 'self-intro',
    question: {
      zh: '为什么选择IT行业？',
      ja: 'なぜIT業界を選んだのですか？'
    },
    answer: {
      zh: '我选择IT行业主要有几个原因：首先，我对技术和创新有浓厚的兴趣，喜欢解决复杂的问题；其次，IT行业发展迅速，能够不断学习新技术，保持自己的竞争力；最后，通过技术可以创造价值，改善人们的生活，这让我感到很有成就感。',
      ja: 'IT業界を選んだ理由はいくつかあります。まず、技術と革新に深い興味があり、複雑な問題を解決することが好きです。次に、IT業界は急速に発展しており、常に新しい技術を学び、競争力を維持できます。最後に、技術を通じて価値を創造し、人々の生活を改善できることに大きなやりがいを感じています。'
    },
    tags: ['动机', '职业选择'],
    difficulty: 'easy'
  },

  // 优缺点分析
  {
    id: 'strengths-1',
    category: 'general',
    subcategory: 'strengths-weaknesses',
    question: {
      zh: '你的优点是什么？',
      ja: 'あなたの長所は何ですか？'
    },
    answer: {
      zh: '我的主要优点包括：1. 学习能力强 - 能够快速掌握新技术和新工具；2. 问题解决能力 - 喜欢分析问题的根本原因，寻找最佳解决方案；3. 团队合作 - 善于与不同背景的同事协作，共同完成项目目标；4. 责任心强 - 对工作认真负责，确保项目质量和进度。',
      ja: '私の主な長所は以下の通りです：1. 学習能力が高い - 新しい技術やツールを迅速に習得できます；2. 問題解決能力 - 問題の根本原因を分析し、最適な解決策を見つけることが得意です；3. チームワーク - 異なる背景を持つ同僚と協力し、プロジェクト目標を共に達成できます；4. 責任感が強い - 仕事に真摯に取り組み、プロジェクトの品質とスケジュールを確保します。'
    },
    tags: ['优点', '自我评价'],
    difficulty: 'easy'
  },
  {
    id: 'weaknesses-1',
    category: 'general',
    subcategory: 'strengths-weaknesses',
    question: {
      zh: '你的缺点是什么？如何改进？',
      ja: 'あなたの短所は何ですか？どのように改善していますか？'
    },
    answer: {
      zh: '我的一个缺点是有时过于追求完美，会在细节上花费过多时间。为了改进这个问题，我开始：1. 设定明确的时间限制，避免过度优化；2. 与团队成员讨论，明确什么是"足够好"的标准；3. 学会优先处理最重要的功能，然后再考虑优化。通过这些方法，我已经在时间管理方面有了明显改善。',
      ja: '私の短所の一つは、時として完璧を求めすぎて、細部に過度な時間を費やしてしまうことです。この問題を改善するために、以下のことを始めました：1. 明確な時間制限を設定し、過度な最適化を避ける；2. チームメンバーと話し合い、「十分良い」基準を明確にする；3. 最も重要な機能を優先的に処理し、その後最適化を検討する。これらの方法により、時間管理において明らかな改善が見られました。'
    },
    tags: ['缺点', '改进计划'],
    difficulty: 'medium'
  },

  // 职业规划
  {
    id: 'career-1',
    category: 'general',
    subcategory: 'career-goals',
    question: {
      zh: '你的职业规划是什么？',
      ja: 'あなたのキャリアプランは何ですか？'
    },
    answer: {
      zh: '我的职业规划可以分为短期和长期目标：短期内（1-2年），我希望在当前技术栈上加深专业知识，同时学习新的相关技术，成为团队中的技术骨干；中期（3-5年），我计划向技术架构师或团队领导方向发展，不仅要有扎实的技术基础，还要培养项目管理和团队管理能力；长期来看，我希望能够成为技术专家或技术管理者，为公司的技术决策提供专业建议。',
      ja: 'キャリアプランを短期と長期の目標に分けて考えています：短期的には（1-2年）、現在の技術スタックでの専門知識を深め、同時に新しい関連技術を学び、チームの技術的中核となることを目指します；中期的には（3-5年）、技術アーキテクトやチームリーダーの方向で発展し、堅実な技術基盤だけでなく、プロジェクト管理とチーム管理能力も培いたいと考えています；長期的には、技術専門家または技術管理者として、会社の技術決定に専門的な助言を提供できるようになりたいです。'
    },
    tags: ['职业规划', '目标设定'],
    difficulty: 'medium'
  },

  // 日本企业特色问题
  {
    id: 'japan-1',
    category: 'japan-specific',
    question: {
      zh: '你对加班怎么看？',
      ja: '残業についてどう思いますか？'
    },
    answer: {
      zh: '我认为适度的加班在项目关键时期是可以理解的，这体现了对工作的责任心。但是，我更倾向于通过提高工作效率、合理安排时间和任务优先级来避免不必要的加班。我相信良好的工作与生活平衡不仅有利于个人健康，也能提高长期的工作效率。如果需要加班，我会全力配合，同时也希望公司能够关注员工的工作生活平衡。',
      ja: '重要なプロジェクトの時期における適度な残業は理解できると思います。これは仕事に対する責任感の表れでもあります。しかし、私は仕事の効率を向上させ、時間とタスクの優先順位を合理的に管理することで、不必要な残業を避けることを好みます。良いワークライフバランスは個人の健康に有益であるだけでなく、長期的な仕事の効率も向上させると信じています。残業が必要な場合は全力で協力しますが、同時に会社が従業員のワークライフバランスを重視していただければと思います。'
    },
    tags: ['加班', '工作态度', '日本文化'],
    difficulty: 'hard'
  },
  {
    id: 'japan-2',
    category: 'japan-specific',
    question: {
      zh: '你如何看待日本的团队合作文化？',
      ja: '日本のチームワーク文化についてどう思いますか？'
    },
    answer: {
      zh: '我非常欣赏日本的团队合作文化，特别是"报告、联络、商议"（ホウレンソウ）的沟通原则。这种文化强调：1. 信息透明化 - 及时分享工作进展和问题；2. 集体决策 - 重视每个成员的意见，通过充分讨论达成共识；3. 相互支持 - 团队成员互相帮助，共同承担责任。我认为这种文化能够减少误解，提高工作效率，并培养强烈的团队凝聚力。',
      ja: '日本のチームワーク文化、特に「報告・連絡・相談」（ホウレンソウ）のコミュニケーション原則を非常に評価しています。この文化は以下を重視します：1. 情報の透明化 - 作業の進捗と問題をタイムリーに共有する；2. 集団決定 - 各メンバーの意見を重視し、十分な議論を通じて合意に達する；3. 相互支援 - チームメンバーが互いに助け合い、責任を共に負う。この文化は誤解を減らし、作業効率を向上させ、強いチーム結束力を育むことができると考えています。'
    },
    tags: ['团队合作', '沟通', '日本文化'],
    difficulty: 'medium'
  },

  // Java技术问题
  {
    id: 'java-1',
    category: 'technical',
    subcategory: 'java',
    question: {
      zh: '解释Java中的面向对象编程三大特性',
      ja: 'Javaのオブジェクト指向プログラミングの三大特徴を説明してください'
    },
    answer: {
      zh: 'Java面向对象编程的三大特性是：\n1. 封装（Encapsulation）- 将数据和操作数据的方法包装在类中，通过访问修饰符控制访问权限，隐藏内部实现细节\n2. 继承（Inheritance）- 子类继承父类的属性和方法，实现代码复用和扩展\n3. 多态（Polymorphism）- 同一个接口可以有不同的实现，运行时根据对象类型调用相应的方法\n\n这些特性使代码更易维护、复用和扩展。',
      ja: 'Javaのオブジェクト指向プログラミングの三大特徴は：\n1. カプセル化（Encapsulation） - データとそれを操作するメソッドをクラス内に包装し、アクセス修飾子でアクセス権限を制御し、内部実装の詳細を隠蔽する\n2. 継承（Inheritance） - 子クラスが親クラスの属性とメソッドを継承し、コードの再利用と拡張を実現する\n3. ポリモーフィズム（Polymorphism） - 同じインターフェースに異なる実装を持たせ、実行時にオブジェクトの型に応じて適切なメソッドを呼び出す\n\nこれらの特徴により、コードはより保守しやすく、再利用可能で拡張性があります。'
    },
    tags: ['Java', 'OOP', '基础概念'],
    difficulty: 'easy'
  },
  {
    id: 'java-2',
    category: 'technical',
    subcategory: 'java',
    question: {
      zh: 'Spring Boot的自动配置原理是什么？',
      ja: 'Spring Bootの自動設定の仕組みは何ですか？'
    },
    answer: {
      zh: 'Spring Boot自动配置基于以下几个核心机制：\n1. @EnableAutoConfiguration注解 - 启用自动配置功能\n2. spring.factories文件 - 定义自动配置类的列表\n3. 条件注解 - 如@ConditionalOnClass、@ConditionalOnMissingBean等，控制配置类的加载条件\n4. 配置属性 - 通过application.properties/yml文件进行个性化配置\n\n工作流程：启动时扫描classpath下的spring.factories文件，根据条件注解判断是否加载相应的自动配置类，最终生成Bean并注册到Spring容器中。',
      ja: 'Spring Bootの自動設定は以下の核心的なメカニズムに基づいています：\n1. @EnableAutoConfigurationアノテーション - 自動設定機能を有効にする\n2. spring.factoriesファイル - 自動設定クラスのリストを定義\n3. 条件アノテーション - @ConditionalOnClass、@ConditionalOnMissingBeanなど、設定クラスの読み込み条件を制御\n4. 設定プロパティ - application.properties/ymlファイルで個別設定を行う\n\n動作フロー：起動時にclasspath下のspring.factoriesファイルをスキャンし、条件アノテーションに基づいて対応する自動設定クラスを読み込むかどうかを判断し、最終的にBeanを生成してSpringコンテナに登録します。'
    },
    tags: ['Spring Boot', '自动配置', '框架原理'],
    difficulty: 'hard'
  },

  // React技术问题
  {
    id: 'react-1',
    category: 'technical',
    subcategory: 'react',
    question: {
      zh: '解释React的虚拟DOM概念及其优势',
      ja: 'ReactのVirtual DOMの概念とその利点を説明してください'
    },
    answer: {
      zh: '虚拟DOM（Virtual DOM）是React的核心概念：\n\n概念：虚拟DOM是真实DOM的JavaScript对象表示，是一个轻量级的内存中DOM树副本。\n\n工作原理：\n1. 当状态改变时，React创建新的虚拟DOM树\n2. 通过Diff算法比较新旧虚拟DOM树的差异\n3. 只更新发生变化的真实DOM节点\n\n优势：\n• 性能优化 - 减少直接DOM操作，批量更新\n• 跨浏览器兼容性 - 抽象了浏览器差异\n• 可预测性 - 声明式编程，状态驱动视图更新',
      ja: 'Virtual DOMはReactの核心概念です：\n\n概念：Virtual DOMは実際のDOMのJavaScriptオブジェクト表現で、メモリ内の軽量なDOMツリーのコピーです。\n\n動作原理：\n1. 状態が変更されると、Reactは新しいVirtual DOMツリーを作成\n2. Diffアルゴリズムで新旧のVirtual DOMツリーの差分を比較\n3. 変更があった実際のDOMノードのみを更新\n\n利点：\n• パフォーマンス最適化 - 直接的なDOM操作を減らし、バッチ更新\n• クロスブラウザ互換性 - ブラウザの差異を抽象化\n• 予測可能性 - 宣言的プログラミング、状態駆動のビュー更新'
    },
    tags: ['React', 'Virtual DOM', '性能优化'],
    difficulty: 'medium'
  },

  // AWS问题
  {
    id: 'aws-1',
    category: 'technical',
    subcategory: 'aws',
    question: {
      zh: '解释AWS的EC2、S3和RDS服务的用途',
      ja: 'AWSのEC2、S3、RDSサービスの用途を説明してください'
    },
    answer: {
      zh: 'AWS核心服务说明：\n\n1. EC2 (Elastic Compute Cloud)\n• 用途：提供可扩展的虚拟服务器\n• 特点：按需付费、多种实例类型、自动扩展\n• 适用场景：Web应用托管、计算密集型任务\n\n2. S3 (Simple Storage Service)\n• 用途：对象存储服务\n• 特点：无限存储空间、高可用性、多种存储类别\n• 适用场景：静态网站托管、备份、大数据分析\n\n3. RDS (Relational Database Service)\n• 用途：托管关系型数据库\n• 特点：自动备份、多可用区部署、性能监控\n• 适用场景：应用数据存储、事务处理系统',
      ja: 'AWSの核心サービスの説明：\n\n1. EC2 (Elastic Compute Cloud)\n• 用途：スケーラブルな仮想サーバーを提供\n• 特徴：オンデマンド課金、多様なインスタンスタイプ、自動スケーリング\n• 適用シーン：Webアプリケーションホスティング、計算集約的タスク\n\n2. S3 (Simple Storage Service)\n• 用途：オブジェクトストレージサービス\n• 特徴：無制限ストレージ、高可用性、多様なストレージクラス\n• 適用シーン：静的ウェブサイトホスティング、バックアップ、ビッグデータ分析\n\n3. RDS (Relational Database Service)\n• 用途：マネージドリレーショナルデータベース\n• 特徴：自動バックアップ、マルチAZ配置、パフォーマンス監視\n• 適用シーン：アプリケーションデータ保存、トランザクション処理システム'
    },
    tags: ['AWS', 'Cloud Services', '基础服务'],
    difficulty: 'medium'
  }
] 